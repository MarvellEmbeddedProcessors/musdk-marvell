.. _MUSDK-Installation:

Getting Started with MUSDK
===========================

Build Linux Kernel
------------------

(1) Apply all patches in: "<musdk-dir>/patches/linux"

(2) Build Linux kernel image::
	> make mrproper
	> make mvebu_v8_lsp_defconfig
	> make

(3) Build Safexcel crypto driver and copy "crypto_safexcel.ko" to file system.
    This step is optional and required only when using SAM driver::

	> make modules M=drivers/crypto/inside-secure/

.. _kernel-modules:

Build Required Kernel Modules
-----------------------------
(1) Set environment variables:

	- Cross compiler for compilation of modules, must be same as compiler that was used for Kernel. for example::

		> export CROSS_COMPILE=~/SDK/aarch64v8-marvell-linux-gnu-5.2.1_i686_20151110/bin/aarch64-marvell-linux-gnu-

	- Kernel directory. for example::

		> export KDIR=~/linux-4.4.52-devel

(2) Build the Marvell PP2 sysfs kernel module according to :ref:`Sysfs Build Instructions <pp2x_sysfs_build>`.

(3) Build the MUSDK UIO kernel module and install it::

	> cd <musdk-dir>/modules/uio
	> make

(4) Build the SAM UIO kernel module and install it.
    This step is optional and required only when SAM driver is used::

	> cd <musdk-dir>/modules/sam
	> make

(5) Build the DMA UIO kernel module and install it.
    This step is optional and required only when DMA driver is used::

		=> cd <musdk-dir>/modules/dmax2
		=> make

(6) Build the NETA UIO kernel module and install it.
    This step is optional and required only when NETA driver is used::

		=> cd <musdk-dir>/modules/neta
		=> make


Prepare EIP197 Firmware images
-------------------------------
This step is optional and required only when using SAM driver on EIP197 crypto device.

Get EIP197 Firmware from release binaries and copy them to target file system
under directories:
"/lib/firmware/eip197/197b/" - EIP197b (A7K/A8K)
"/lib/firmware/eip197/197d/" - EIP197d (A8K+)

Binary files: ipue.bin, ifpp.bin


Configure and Build MUSDK
-------------------------
Set external variables:

   - Cross compiler for compilation of user space libraries and applications. For example::

	> export CROSS_COMPILE=~/SDK/aarch64v8-marvell-linux-gnu-5.2.1_i686_20151110/bin/aarch64-marvell-linux-gnu-

Build the MUSDK package
~~~~~~~~~~~~~~~~~~~~~~~

(1) Run bootstrap for initial configuration

	> cd <musdk-dir>
	> ./bootstrap

(2) Configure MUSDK

	.. note::
		For shared libraries compilation of MUSDK must be configured with ``--host=aarch64-linux-gnu``.

	- For A7040/8040 use:
		* configure option #1 - build PP2 driver and related applications::

			> ./configure

		* configure option #2 - build PP2 with SAM driver and SAM test application::

			> ./configure --enable-sam [--enable-sam-statistics] [--enable-sam-debug]

	- For A3700 use:
		* configure option #3 - build NETA driver and related applications::

			> ./configure --enable-neta --enable-pp2=no

		* configure option #4 - build NETA driver with SAM driver and SAM test application::

			> ./configure --enable-neta --enable-pp2=no --enable-sam [--enable-sam-statistics] [--enable-sam-debug]

	- For A808x/816x use:
		* configure option #5 - build PP2 driver and related applications::

			> ./configure --enable-pp2-lock

		* configure option #6 - build PP2 with SAM driver and SAM test application::

			> ./configure --enable-pp2-lock --enable-sam [--enable-sam-statistics] [--enable-sam-debug]

(3) Build MUSDK
		> make -j8

(4) Install MUSDK
		> make install

  .. note::
	Default install directory is: <musdk-dir>/usr/local.
	Install directory can be changed using: ``make install DESTDIR=<install-dir>``

Insert Kernel Modules
---------------------
(1) Copy the kernel modules (musdk_uio.ko, etc.) to the target board file-system.

(2) Copy the MUSDK local install folder (as defined by AC_PREFIX_DEFAULT) to the target board file-system.

(3) Insert MUSDK kernel space modules::

	> insmod musdk_cma.ko     (mandatory)

    For A7040/8040::

	> insmod mv_dmax2_uio.ko  (optional)

    For A3700::

        > insmod mv_neta_uio.ko   (mandatory)

(4) Insert Marvell PP2 sysfs kernel module (optional - needed for RSS support, for logical ports and for unicast filtering)::

	> insmod mvpp2x_sysfs.ko

To run MUSDK SAM test applications kernel modules below must be loaded first:

(5) Load kernel module for global EIP197 initializations::

	> insmod crypto_safexcel.ko rings=0,0

    .. note::

	It is mandatory to load this module before mv_sam_uio.ko module.

(6) Load kernel module for SAM UIO support::

	> insmod mv_sam_uio.ko

    .. note::

	rings=x,y means how many EIP197/EIP97 rings allocated for kernel usage:
		- x - for cp0 device
		- y - for cp1 device (if exist)


Run MUSDK Application Examples
------------------------------
Please see instructions in "Running MUSDK Examples" section.

In addition, some module-specific test applications are described in the corresponding user guide section.
