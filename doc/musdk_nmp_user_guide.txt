Networking Management Proxy (NMP) User Guide
============================================

Introduction
------------

The Networking Management Proxy (NMP) is a "sub-system" that includes several SW modules
The NMP is responsible for the initialization, configuration and maintenance of the network related interfaces and using their drivers.
The NMP initializes the network drivers according to a given "topology".

The NMP is also responsible for dispatching of various management commands from InQs toward the relevant SW module that handles the request.
It exposes APIs toward the host application for the initialization and the configuration of its logical-interfaces,
such as PF configurations parameters including number of outQs, outDoneQs, inQs, etc.

It also exposes APIs toward the host for controlling the network drivers such as link up/down, set/get MTU, add/remove l2-filter, etc.
The NMP may be configured and run by the user application as either separate thread/process or integrated along with all user modules in the same thread/process.

Here are some examples of operation that the NMP, only partial are supported:

	- Qs:
		- Alloc/Free Q
		- Create Q
	- NIC basic:
		- Set/get MTU
		- Set/get l2-filter
	- SW/NIC tables:
		- Add/remove flow
		- Get flow stats
		- Add/remove tunnel
	- Crypto:
		- Create/destroy SA


The NMP is built from the following modules:

		.. figure:: /images/musdk_nmp.*
		   :align: center

		   NMP SW modules

	- NMP Master:
		Responsible for creation of the networking management sub-system according to input “topology”/configuration input
		(may be a JSON or XML file).

		It is also responsible for initialization of all the NMP SW modules; i.e. the NMP-dispatch, GIU, NMP-PF, NMP-custom, etc.

	- NMP Dispatcher:
		This SW module is responsible for collecting management commands from the management input Qs and dispatch them (according to a unique/dedicated field in the management-descriptor)

		Between the various management elements. I.e. there will be commands that are targeted to the PF while other commands are targeted to the customer application.

	- NMP Database:
		This SW module is centralized database including all configuration, debug and performance monitoring information

	- NMP PF/VF/vSwitch:
		These are SW modules that are part of the NMP "Logical Function" layer and are responsible for the operation of the MUSDK networking drivers;
		i.e. the MVPP2, MVSAM, MVGIU.

		It should initialize and control the drivers through the MUSDK API (and not through the ODP/DPDK API).

	- NMP Custom:
		This module is actually just a pipe for the management commands that are dedicated to the user forwarding application.
		It will communicate with the customer-app through a Q.
		It will expose an API for the customer application to register a command callback.


NMP Modules
-----------

Dispatcher
^^^^^^^^^^

	The NMP contain a module named Dispatcher who is responsible for moving command messages between all NMP LFs and NMP LF’s Qs.
	The figure below introduces the concept of the dispatcher and its relation with internal and external clients.

		.. figure:: /images/musdk_nmp_dispatch.*
		   :align: center

		**NMP Dispatcher Model**

		Inside the NMP, there may be several LFs that serves the LF-SW outside the NMP. For every LF within the NMP,
		there should be equivalent (at least) one pair of Qs in order to communicate with the LF equivalent LF-SW clients
		outside; one per direction – one for messages to NMP and one for messages from NMP.
		Here are all the messaging forwarding options and their rules:

		•	If a message is sent from LF (e.g. LF1) to one of its clients in the LF-SW (e.g. client1@LF-SW1)
			(it means that the destination client is external and it is registered on its Qs as the part the equivalent LF-SW),
			the message should pass from the LF (LF1), through the dispatcher, through the relevant Q (of the same LF)
			toward the client (client1@LF-SW1).
		•	At the other direction, if a message is sent from one the clients in an LF-SW (e.g. client1@LF-SW1),
			it should pass through the equivalent Q, to the dispatcher and then directly toward the desired LF (e.g. to LF1 or LF2)
			(maybe skipping the equivalent LF).
		•	In case an LF (e.g. LF1) wishes to send message to another LF (e.g. LF2), the dispatcher will forward it directly within
			the NMP without going through any Q.
		•	In case an LF (e.g. LF1) wises to send message to another LF-SW (e.g. client1@LF-SW2), the dispatcher will first
			forward it to the equivalent LF (LF2) locally, the equivalent LF (LF2) will forward the message (or filter it)
			toward its equivalent LF-SW (client1@LF-SW1), through the dispatcher, to the equivalent Q and eventually toward
			the desired LF-SW (client1@LF-SW1).
		•	In case LF-SW (e.g. client1@LF-SW1) wishes to send message to another LF-SW LF-SW (e.g. client1@LF-SW2),
			it should pass through the equivalent Q, to the dispatcher and then directly toward the desired LF (LF2),
			then the desired LF (LF2) will forward the message (or filter it) toward its equivalent LF-SW (client1@LF-SW2),
			through the dispatcher, to the equivalent Q and eventually toward the desired LF-SW (client1@LF-SW2).

Descriptors
^^^^^^^^^^^

	NMP shall support requests descriptors that will be used by the host driver to pass management commands through the
	MNG request Qs. In addition, it will support response descriptors that will be used by the NMP to send responses to
	the host through the MNG response Qs.

NIC PF
^^^^^^

		**NIC control operations**

		The NMP NIC PF shall support standard NIC operations. Most of the operation will be initialized by the host netdev
		driver (e.g. set mtu, set mac-address, etc.). There are some operations that will be initiated by the local application
		of local drivers (e.g. PHY events – link up/down). The NIC PF operations are depend on the specific PF port type that
		is configured. Below are all the supported operations and the expected behaviour of the NMP PF from type of PP2 port:

		- Set enable/disable:	from host
			NMP PF should call the PPv2 to enable/disable the PPIO.

			NOTE: enable/disable will be called by the host netdev driver upon ifup/ifdown operations.
		- Set/get mtu:			from host
			NMP PF should call the PPv2 to set/get MTU/MRU.
		- Set/get mac-address:	from host
			NMP PF should call the PPv2 to set/get mac-address.
		- Set/get promisc:		from host
			NMP PF should call the PPv2 to set/get promisc.
		- Set/get loopback:		from host
			NMP PF should call the PPv2 to set/get LB.
		- Add/remove mac-address:	from host
			NMP PF should call the PPv2 to add/remove mac-address.
		- Add/remove vlan:		from host
			NMP PF should call the PPv2 to add/remove vlan.

		NOTE: guest application may be registered as a listener for every of the above supported operation.
		In that case, once the NMP applied the operation, it should also trigger a notification to the guest application.


Supported APIs
-----------

	- NMP
		- NMP initialization
		- NMP de-initialization
		- NMP schedule

	- Dispatcher
		- Dispatcher initialization
		- Dispatcher de-initialization
		- Dispatcher register client
		- Dispatcher de-register client
		- Dispatcher add queue
		- Dispatcher send msg
		- Dispatch

Source tree
-----------

	musdk/
	  - src/include/mng/ - public include files for NMP Package.
		- mv_nmp_dispatch.h
		- mv_nmp.h

	  - src/mng/	- NMP Package implementation

