Introduction to MUSDK
=====================
Marvell User-Space SDK (MUSDK) is a light-weight user-space I/O driver for Marvell's
Embedded Networking SoC's. The MUSDK library provides a simple and direct access to Marvell's
SoC blocks to networking applications and networking infrastructure.


MUSDK Components
----------------
The following diagram shows the main components in an example control and data plane system.
MUSDK components reside mainly in User-Space, relying on UIO services provided by the Kernel.
MUSDK also takes care of synchronization with the Kernel driver counterparts, for correct system operation.

.. _fig_musdk_sys:

.. figure:: /images/musdk_sys.*
   :align: center

   MUSDK Components


UIO Infrastructure
~~~~~~~~~~~~~~~~~~
Linux provides a standard UIO (User I/O) framework for developing user-space device drivers.
The UIO framework incorporates a Kernel component that is capable of mapping device memory regions to user space.

The kernel-space UIO component exposes the device via a set of Linux standard mechanisms.
The user-space component searches for these entries, reads the device address ranges and maps them to user space memory.
The user-space component can then perform any device-management tasks directly, including I/O from the device.

Packet Processor V2 Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The MUSDK PPV2 driver provides low-level network interface API for User-Space network drivers/applications.
The driver's infrastructure maps Marvell's Packet Processor (PPv2) configuration space and I/O descriptors space
directly to user-space memory. This allows user-space driver/application to directly process the
packet processor I/O rings from user space, without any overhead of a copy operation.

Please refer to :ref:`Packet Processor V2 (PPV2) User Guide and API reference <ppv2_user_guide>` for more details.

Packet Processor V2 Classifier Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The MUSDK Classifier provides a low-level network interface API to enable applications program Marvell's
Packet Processor (PPv2) hardware in order to assist in prioritization, classification and filtering of
each packet.

Please refer to Classifier User Guide and API reference for more details.

Security Acceleration Module (SAM)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The MUSDK SAM driver provides capability for operating the Security Acceleration engine (SAM/EIP197)
directly from user-space with minimum overhead and high performance. The SAM driver exports API for
creating and deleting security session, for sending crypto requests to the HW engine,
and for retrieving the crypto operation outcome from the HW engine.

Please refer to SAM User Guide and API reference for more details.

DMA-copy engine module (DMAX2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The MUSDK DMA driver provides low-level access to the DMA XOR v2 engines, to perform regular DMA
data transfers and memory filling (with pattern) operations.
This allows user-space driver/application to directly process copy operations using the DMA engine.

Please refer to DMA User Guide and API reference for more details.

DMA-able Memory Allocation
~~~~~~~~~~~~~~~~~~~~~~~~~~
MUSDK provides API to allocate a single contiguous memory region for run-time DMA-able data buffers.
This memory region is then mapped to user space to serve of drivers and applications.
MUSDK also provides API for driver/application to allocate data buffers from this memory region,
and then to release them back once they were processed.


Software Environment
--------------------
Endianness
~~~~~~~~~~~
MUSDK supports both Little-Endian and Big-Endian modes. No dedicated compilation flags are required.

Memory address width
~~~~~~~~~~~~~~~~~~~~
Following compilation flags concern width of types that have to do with addresses.

#.    MVCONF_DMA_PHYS_ADDR_T_PUBLIC
	- Flag defines if dma_addr_t and phys_addr_t types should be defined inside MUSDK.
	- The user application should define this flag in its compilation, if these types are not already defined internally,
	  and are therefore required to be taken from MUSDK.
	- Flag is used in src/include/env/mv_types.h.

#.    MVCONF_DMA_PHYS_ADDR_T_SIZE
	- Flag defines if dma_addr_t and phys_addr_t types are u64 or u32.
	- Flag _must_ be defined in user application, and it must match the value that was used during musdk_lib compilation
	  ./configure stage (MUSDK configure.ac default=64).
	- Values:(32,64).
	- Flag is used in src/include/env/mv_types.h and in MUSDK implementation.

#.    MVCONF_PP2_BPOOL_COOKIE_SIZE
	- Flag sets the size of the user_defined cookie type (i.e. packet meta-data or virtual pointer) in a frame_buffer
	  of the ppv2 driver.
	- Flag _must_ be defined in user application, and it must match the value that was used during musdk_lib compilation
	  ./configure stage (MUSDK configure.ac default=32).
	- Values:(32,64).
	- Flag is used in src/include/drivers/mv_pp2_bpool.h and in MUSDK implementation.

#.    MVCONF_PP2_BPOOL_DMA_ADDR_SIZE
	- Flag sets the size of the frame_buffer type. Usually this would be the same size as dma_addr_t, but in certain cases the
	  user may decide to make it smaller than dma_addr_t.
	- Flag _must_ be defined in user application, and it must match the value that was used during musdk_lib compilation
	  ./configure stage (MUSDK configure.ac default=32).
	- Values:(32,64).
	- Flag is used in src/include/drivers/mv_pp2_bpool.h and in MUSDK implementation.

HW Resource Management
----------------------

MUSDK shares a number of HW resources with the Kernel. MUSDK does not perform resource management, but does provide some means to assist the user application to perform such management.

Linux Resource Mapping
~~~~~~~~~~~~~~~~~~~~~~

MUSDK introduces a new musdk-status “attribute” into the Linux DTS file that allows the KS driver to determine if a HW Port is allocated to MUSDK or not.

.. _MUSDK-INTRO-DTS:

DTS attribute
	- **musdk-status = 'private'** states that a port belongs to MUSDK, and not to the kernel.
	- **musdk-status = 'shared'** states that a port is shared by MUSDK and the kernel. (MUSDK logical port)::

		e.g.
		eth0: eth0@010000 {
			musdk-status = "private";
		};


