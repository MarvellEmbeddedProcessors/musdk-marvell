Running MUSDK Examples
======================

1. PKT-ECHO
===========

1.1 Functional Overview
------------------------
The pkt-echo application performs all required initializations, using the MUSDK API's.

The application provides several compile-time options, as described below:

	- #define PKT_ECHO_SUPPORT	(default=defined)
		  PKT_ECHO_SUPPORT will scrub the packet_header, by swapping L2 MAC addresses and IPV4 addresses.
		  Without it, pkt_echo application will not touch the packet at all.
	- #define USE_APP_PREFETCH	(default=defined)
		  USE_APP_PREFETCH prefetches the pkt_buffer of a packet that is few packets behind
		  the currently_handled packet in the receive_queue.
		  This significantly improves performance for usecases where packets are being modified.
	- #define PREFETCH_SHIFT	(7)
		  PREFETCH_SHIFT defines the number-of-packets-ahead in the receive_queue that is prefetched.
	- #define HW_BUFF_RECYLC	(default=undefined)
		  This mode makes use of Hardware Buffer Recycling:
		  The buffer of the transmitted packet is returned to the Buffer Manager automatically by Hardware.
		  Example usecase is when the bpool of received packet and the transmitted packet is the same.
	- #define SW_BUFF_RECYLCE	(default=undefined)
		  Mechanism demonstrating use of index_based cookies instead virtual_addresses for buffer_pointers.
	- #define HW_TX_CHKSUM_CALC	(default=undefined)
		  This causes packet_send to request Hardware to perform L3/L4 checksum calculation.

1.2 HOW-TO
----------
Base Configuration for 8040-DB:

		> ifconfig eth0 10.10.10.1 netmask 255.255.255.0 up
		> ifconfig eth1 11.11.11.1 netmask 255.255.255.0 up
		> ifconfig eth2 12.12.12.1 netmask 255.255.255.0 up
		> ifconfig eth3 13.13.13.1 netmask 255.255.255.0 up
		> sleep 1
		> insmod musdk_uio.ko
		> insmod mv_pp_uio.ko
		> insmod mvpp2x_sysfs.ko

Command parameters:

	See help in application.

Limitations
	- It is assumed the interface is brought up in Linux before being used by musdk_pkt_echo.


1.3. Examples for single core, no RSS
-------------------------------------
a. 10G eth0 queue 0, cpu_core 3

		> ./musdk_pkt_echo -i eth0 -a 3

b. 10G eth2, queue 0, cpu_core 3

		> ./musdk_pkt_echo -i eth2 -a 3

c. 10G eth0 <-> eth2, queue 0, cpu_core 3

		> ./musdk_pkt_echo -i eth0,eth2 -a 3

d. 1G eth3, queue 0, cpu_core 3

		> ./musdk_pkt_echo -i eth3 -a 3

1.4. Examples for two cores, with RSS
-------------------------------------

a. 10G eth0, queue 0,1, core 1,2

		> ./musdk_pkt_echo -i eth0 -c 2 -m 1:1 -a 1

b. 10G eth2, queue 0,1, core 1,2

		> ./musdk_pkt_echo -i eth2 -c 2 -m 1:1 -a 1

c. 10G eth0 <-> eth2, queue 0,1 core 1,2

		> ./musdk_pkt_echo -i eth0,eth2 -c 2 -m 1:1 -a 1


2. PKT_L3FWD
=============
The musdk_pkt_l3fwd is a basic L3 forwarding application supplied with MUSDK framework, and is based on destination
IP forwarding (LPM). Marvell L3 FWD application is extended to support full Layer3 - 5-tuple forwarding. Original destination
IP forwarding is supported as well.
User can choose between the L3 forwarding application types by using the next flag located in l3fwd_db.h file:

		#define LPM_FRWD

In order to enable the 5-tuple forwarding the application should be recompiled without the above #define.

2.1. Basic configuration

A default configuration option is supplied by MUSDK framework through command line.
The L3 Forwarding applet is invoked by calling: musdk_pkt_l3fwd.

Mandatory OPTIONS:

		-i, --interface eth interfaces (comma-separated, no spaces)

For LPM forwarding:
		-r, --route SubNet,Intf[,NextHopMAC] NextHopMAC can be optional

For 5-tuple forwarding:
		-r, --route Src_SubNet,Dst_SubNet,Src_Port,Dst_Port,0-UDP/1-TCP,Dst_Intf[,NextHopMAC] NextHopMAC can be optional

Optional OPTIONS:
		-b <size>                Burst size, num_pkts handled in a batch.(default is 1024)
		--mtu <mtu>              Set MTU (default is 1500)
		-c, --cores <number>     Number of CPUs to use
		-a, --affinity <number>  Use setaffinity (default is no affinity)
		-s                       Maintain statistics
		-w <cycles>              Cycles to busy_wait between recv&send, simulating app behavior (default=0)
		--rxq <size>             Size of rx_queue (default is 2048)
		--cli                    Use CLI
		--routing-file           Use *.xml file
		--mac-dst-file           Use *.xml file
		?, -h, --help            Display help and exit.

Example for LPM forwarding:

		> ./musdk_pkt_l3fwd -i eth1,eth3 -r 192.168.1.0/24,eth3 -r 1.1.1.0/24,eth1

The above command will initialize eth1 and eth3 ports. in addition, all traffic with subnet 192.168.1.0/24 will
forward to eth3, and all traffic with subnet  r 1.1.1.0/24 will forward to eth1, other traffic will be dropped.

Example for 5-tuple forwarding:

		> musdk_pkt_l3fwd -i eth0,eth2 -r 1.1.1.10/24,192.168.1.10/24,1024,1024,0,eth0

The above command line will initialize eth0 and eth2 ports. in addition,  all traffic with 5 tuple: src ip: 1.1.1.10,
dst ip: 192.168.10, src port: 1024, dst port: 1024 and UDP,  will forward to eth0, other traffic will be dropped.


2.2. XML files

Marvell applet support optional configuration using xml files. When there are valid XML files the applet will take the
configuration first from command line and the rest configuration from XML file up to 64K entries.
The XML filename and path may be passed to the applet through command line (see --routing-file and
--mac-dst-file options above).

The following xml files supported:
	- Forwarding table for L3 FWD application based on LPM forwarding.
		> example: l3_routing_lpm.xml

			<?xml version="1.0"?>
			<L3Route>
			  <RouteEntry>
				<Lpm>
					<Subnet>192.168.1.0/24</Subnet>
				</Lpm>
			  <OutIf>eth0</OutIf>
			  </RouteEntry>
			  <RouteEntry>
				<Lpm>
					<Subnet> 1.1.1.0/24</Subnet>
				</Lpm>
			  <OutIf>eth0</OutIf>
			  </RouteEntry>
			</L3Route>

	- Forwarding table for L3 FWD application based on 5-tuple forwarding.
		> example: l3_routing_hash.xml

			<?xml version="1.0"?>
			<L3Route>
			  <RouteEntry>
				<Tuple>
					<SrcIP>1.1.1.10</SrcIP>
					<DstIP>192.168.1.10</DstIP>
					<SrcPort>1024</SrcPort>
					<DstPort>1024</DstPort>
					<Protocol>UDP</Protocol>
				</Tuple>
				<OutIf>eth1</OutIf>
			   </RouteEntry>
			  <RouteEntry>
				<Tuple>
					<SrcIP>192.168.1.10</SrcIP>
					<DstIP>1.1.1.10</DstIP>
					<SrcPort>1024</SrcPort>
					<DstPort>1024</DstPort>
					<Protocol>UDP</Protocol>
				</Tuple>
				<OutIf>eth3</OutIf>
			   </RouteEntry>
			</L3Route>

	- Next hop table containing a list of destination mac address.
		> example: if_to_mac.xml

			<?xml version="1.0"?>
			<IF_MAC>
			  <Nexthop>
			    <If>eth0</If>
				<Mac>00:00:00:22:22:00</Mac>
			  </Nexthop>
			  <Nexthop>
			    <If>eth1</If>
				<Mac>00:00:00:22:22:01</Mac>
			  </Nexthop>
			  <Nexthop>
			    <If>eth2</If>
				<Mac>00:00:00:22:22:02</Mac>
			  </Nexthop>
			  <Nexthop>
			    <If>eth3</If>
				<Mac>00:00:00:22:22:03</Mac>
			  </Nexthop>
			</IF_MAC>


3. CLS-DEMO
===========

3.1 Functional Overview
-----------------------
The 'musdk_cls_demo' example application allows configuring several classifier related features as follows:
		- classification rules
		- logical port parameters
		- QoS
		- MAC address filtering
		- VLAN filtering
		- RSS

The application performs all required initializations, using the MUSDK API's.
It includes an "echo" mode allowing to loopback traffic sent to the specific port.


3.2 How To Run The Example Application
---------------------------------------
a. Preferrably use a A8040-A1-DB or A7040-A0-DB board.
b. Compile code as written in the "Getting Started" section.
	- Skip SAM compilation phase.
	- Make sure ALL patches are applied.
c. In Linux, bring up the required interfaces
d. Bring up the modules. Below output is for a 8040-A1-DB:

				> cd /
				> insmod musdk_uio.ko
				Registered cma device: uio-cma
				> insmod mv_pp_uio.ko
				Registered 2 uio devices, having 6 register maps attached
				Registered 2 uio devices, having 6 register maps attached

	In case MAC filtering is used for configuring unicast address, or RSS is used, the following is also needed

				> insmod mvpp2x_sysfs.ko

e. Run the musdk_cls_demo application:

					> ./musdk_cls_demo -i <eth>

   Parameters:
	- '-i eth0' is the linux interface name.
	- '--echo' - sets the cls_demo application in echo mode, enabling loopback of received traffic over the
	  same openned port
	- '--logical_port_params' when the interface is a logical port, this parameter needs to be present,
	  in which case the application requires to configure the logical port parameters (see 2 below)
	- '--ppio_tag_mode' when a special tag mode is to be used as filtering for the logical port
	- '--hash_type' sets the hash type to be used for RSS according to the following values:
		- none:		hash is disabled
		- 2-tuple:	hash is calculated using IP source address and IP destination address (IPv4 and IPv6)
		- 5-tuple:	hash is calculated using IP source address, IP destination address, IP protocol(TCP/UDP only),
				L4 source port, L4 destination port (IPv4 and IPv6)

  Examples:

  1. For MUSDK port

					> ./musdk_cls_demo -i <eth> --echo

  2. For logical port

					> ./musdk_cls_demo -i ppio-0:0 --echo --logical_port_params

	When the --logical_port_params is provided, the application will prompt for the user to enter
	the relevant logical_port classifier parameters as follows:

	please enter logical port params:
		* --target                (dec)
		* --num_proto_rule_sets   (dec)
		* --num_rules             (dec)
		* --rule_type             (dec)
		* --proto                 (dec)
		* --proto_val             (dec)
		* --special_proto         (dec)
		* --special_fields        (dec)
		* --field_val             (dec)

	where:

			--target:		Indicate whether the network protocol rules defined will be used for
						the logical-port (target = 0) or for the NIC (target = 1)
						NOTE: In current release only target = 0 is supported
			--num_proto_rule_sets: 	Number of protocol rule sets to be defined
						NOTE: In current release only num_proto_rule_sets = 1 is supported
			--num_rules:		Number of rules defined for each protocol set
			--rule_type:     	Defines if the rule is a protocol rule or a special field in a protocol
						rule_type = 0 (protocol rule), rule_type = 1 (protocol field rule)
			--proto         	Defines the protocol to match
						NOTE: In current release only UDP or TCP protocols are supported
						(values according to mv_net.h file)
						proto = 9 (TCP), proto = 10 (UDP)
			--proto_val             Indicates whether the selected network protocol is to be matched
						or the negated network protocol is to be matched
						i.e. if VLAN protocol is specified:
						val = 0 indicates all tagged frames are to be matched
						val = 1 indicates all untagged frames are to be matched
						NOTE: In current release protocol_val = 0 is supported
			--special_proto 	Defines a network special protocol to be supported by logical port
						NOTE: in current release, the following special protocols are supported:
						special_proto = 2 (DSA tag)
			--special_fields        NOTE: in current release, the following special protocols fields are supported:
						special_field = 0 (DSA tag mode)
			--field_val             Defines the value of the specified special protocol field
						the available values are defined in mv_net.h under mv_net_eth_dsa_tag_mode_values:
						i.e. field_val = 3 for DSA tag mode forward

	Example configurations for logical port:

	logical port + tcp filter:

					> musdk_cls_demo -i eth1 --echo --logical_port_params
					  --target 0 --num_proto_rule_sets 1 --num_rules 1 --rule_type 0
					  --proto 9 --proto_val 0

	logical port + tcp&udp filter:

					> musdk_cls_demo -i eth1 --echo --logical_port_params
					  --target 0 --num_proto_rule_sets 1 --num_rules 2
					  --rule_type 0 --proto 9 --proto_val 0
					  --rule_type 0 --proto 10 --proto_val 0

  3. For logical port with special tag filtering

					> musdk_cls_demo -i eth1 --echo --logical_port_params --ppio_tag_mode

	please enter tag_mode:
		* --none 		no tag
		* --dsa			dsa tag
		* --extended_dsa	extended dsa tag

	Example configuration for logical port with DSA tag mode filtering:

					> musdk_cls_demo -i eth1 --echo --logical_port_params --ppio_tag_mode
					  --dsa
					  --target 0 --num_proto_rule_sets 1 --num_rules 4
					  --rule_type 1 --special_proto 2 --special_fields 0 --field_val 3

f. Once the application is invoked, it will enter cli mode, where different commands may be issued.
   The following cli commands are supported:


	| Command		| Description									       	|
	|-----------------------|---------------------------------------------------------------------------------------|
	| help          	| print command description/usage							|
	|-----------------------|---------------------------------------------------------------------------------------|
	| ?          	     	| Alias for help									|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_tbl_init		| create a classifier table according to key and default action				|
	|			|	cls_tbl_init --engine_type --tc --drop(opt) --key				|
	|			|											|
	|			| 	--engine_type  (string) exact_match, maskable					|
	|			| 	--tc           (dec) 1..8   - By default only 1is supported, unless kernel is	|
	|			|                	configured to support more than	one queue (refer to Marvell SDK	|
	|			|			for ARMADA Embedded SoCs documentation, under PPv2.2 Kernel  	|
	|			|			Module Parameters chapter					|
	|			| 	--drop         (no argument) optional						|
	|			| 	--key          (string) the following keys are functional in this release:	|
	|			|				ip4_src   - ipv4, souce address				|
	|			|				ip4_dst   - ipv4, destination address			|
	|			|				ip4_proto - ipv4, proto					|
	|			|				l4_src    - layer4, source port				|
	|			|				l4_dst    - layer4, destination port			|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_tbl_deinit	| remove a specified table								|
	|			| 	cls_tbl_deinit --table_index (dec) index to existing table			|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_rule_key          | add a classifier rule key to existing table						|
	|			|       cls_rule_key --add    --table_index --tc --drop(optional) --size --key --mask	|
	|			|	cls_rule_key --modify --table_index --tc --drop(optional) --size --key --mask	|
	|			|	cls_rule_key --remove --table_index --size --key --mask				|
	|			|											|
	|			|	--table_index   (dec) index to existing table					|
	|			|	--tc            (dec) 1..8							|
	|			|	--drop          (optional)(no argument)						|
	|			|	--size          (dec) size in bytes of the key					|
	|			|	--key           (dec or hex) key						|
	|			|			i.e ipv4: 192.168.10.5						|
	|			|		   	i.e ipv6: 2605:2700:0:3::4713:93e3				|
	|			|		   	i.e port: 0x1234						|
	|			|		   	i.e udp: 17(IPPROTO_UDP)					|
	|			|		   	i.e tcp: 6(IPPROTO_TCP)						|
	|			|	--mask          (hex) mask for the key (if maskable is used)			|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_qos_tbl_init	| create a QoS classifier table								|
	|			|	cls_qos_tbl_init --type --pcp_default --pcp_idx --pcp_val 			|
	|			|			 --dscp_default --dscp_idx --dscp_val				|
	|			|											|
	|			|	--type  (string) none, vlan, ip, vlan_ip, ip_vlan				|
	|			|	--pcp_default   TC number - default TC for all table values			|
	|			|			except for values defined in pcp_idx and pcp_val		|
	|			|	--pcp_idx	index in pcp_map table						|
	|			|	--pcp_val	TC value in pcp_map table					|
	|			|			pcp_idx and pcp_val need to be set together, and more than one	|
	|			|			idx/val tuple may be defined 					|
	|			|	--dscp_default  TC number - default TC for all table values			|
	|			|			except for values defined in pcp_idx and pcp_val		|
	|			|	--dscp_idx	index in pcp_map table						|
	|			|	--dscp_val	TC value in pcp_map table					|
	|			|			pcp_idx and pcp_val need to be set together, and more than one	|
	|			|			idx/val tuple may be defined 					|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_qos_tbl_deinit	| remove a specified qos table								|
	|			| 	cls_qos_tbl_deinit --qos_table_index (dec) index to existing table		|
	|-----------------------|---------------------------------------------------------------------------------------|
	| mac_addr		| set/get/add/remove/flush ppio MAC address						|
	|			|	mac_addr --set <xx:xx:xx:xx:xx:xx>						|
	|			|	mac_addr --get									|
	|			|	mac_addr --add <xx:xx:xx:xx:xx:xx>						|
	|			|	mac_addr --remove <xx:xx:xx:xx:xx:xx>						|
	|			|	mac_addr --flush --uc --mc							|
	|-----------------------|---------------------------------------------------------------------------------------|
	| promisc  	       	| set/get ppio unicast/multicast promiscuous mode					|
	|			| 	promisc --<uc/mc> --<on/off/get>						|
	|-----------------------|---------------------------------------------------------------------------------------|
	| vlan          	| set/remove/flush ppio vlan filter							|
	|			| 	vlan --set <vlan_id>								|
	|			|	vlan --remove <vlan_id>								|
	|			|	vlan --flush									|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_print_rxq_counters| print rxq counters									|
	|			| 	cls_print_rxq_counters --tc							|
	|			|											|
	|			|	--tc            (dec) traffic class number					|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_table_dump	| display classifier defined tables							|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_fl_log_rls_dump   | dump all logical flow ID and rule offset						|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_lkp_hits_dump     | dump all hit decode entry and its DB information					|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_fl_hits_dump      | dump all hit flow table entry								|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_fl_rls_dump       | dump all logical flow ID rules							|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_c3_rule_hit_dump  | dump exact_match entries according to type and index					|
	|			| 	cls_c3_rule_hit_dump --type --var (no arguments)				|
	|			|											|
	|			|	--type  (dec) exact_match dump type, 0: logic idx, 1:hash idx, 2:lookup type	|
	|			|	--var   (dec) value according to type, type 0/1:idx, type 2: lookup type	|
	|			|	no arguments -> dumping all flows						|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_c2_rule_hit_dump	| dump maskable entries with the lookup type						|
	|			| 	cls_c2_rule_hit_dump --type  (no arguments)					|
	|			|											|
	|			|	--type  	(dec) lookup type number 0 - 64					|
	|			|	no arguments -> dumping all flows						|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_qos_pcp_table_dump| dump pcp qos table									|
	|-----------------------|---------------------------------------------------------------------------------------|
	|cls_qos_dscp_table_dump| dump dscp qos table									|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_mng_table_dump	| dump all tables and defined rules in db						|
	|-----------------------|---------------------------------------------------------------------------------------|

