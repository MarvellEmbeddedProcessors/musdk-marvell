.. _MUSDK-Examples:

Running MUSDK Examples
======================

Preparations
------------

Please consult :ref:`MUSDK Getting Started <MUSDK-Installation>` for the detailed build instructions.
Prior to running any MUSDK application on board, check :ref:`MUSDK Insert Kernel Modules Section <insert_kernel-modules>`


PKT-ECHO
--------

Functional Overview
~~~~~~~~~~~~~~~~~~~
The pkt-echo application performs all required initializations, using the MUSDK API's.

The application provides several compile-time options, as described below::

	#define PKT_ECHO_SUPPORT	(default=defined)
		  PKT_ECHO_SUPPORT will scrub the packet_header, by swapping L2 MAC addresses and IPV4 addresses.
		  Without it, pkt_echo application will not touch the packet at all.

	#define USE_APP_PREFETCH	(default=defined)
		  USE_APP_PREFETCH prefetches the pkt_buffer of a packet that is few packets behind
		  the currently_handled packet in the receive_queue.
		  This significantly improves performance for usecases where packets are being modified.

	#define PREFETCH_SHIFT	(7)
		  PREFETCH_SHIFT defines the number-of-packets-ahead in the receive_queue that is prefetched.

	#define HW_BUFF_RECYLC	(default=undefined)
		  This mode makes use of Hardware Buffer Recycling:
		  The buffer of the transmitted packet is returned to the Buffer Manager automatically by Hardware.
		  Example usecase is when the bpool of received packet and the transmitted packet is the same.

	#define SW_BUFF_RECYLCE	(default=undefined)
		  Mechanism demonstrating use of index_based cookies instead virtual_addresses for buffer_pointers.

	#define HW_TX_CHKSUM_CALC	(default=undefined)
		  This causes packet_send to request Hardware to perform L3/L4 checksum calculation.

How To Run
~~~~~~~~~~

    Command parameters:

	See help in application.

    Limitations
	- It is assumed the interface is brought up in Linux before being used by musdk_pp2_pkt_echo.


    1. Examples for single core, no RSS::

	a. 10G eth0 queue 0, cpu_core 3

		> ./musdk_pp2_pkt_echo -i eth0 -a 3

	b. 10G eth2, queue 0, cpu_core 3

		> ./musdk_pp2_pkt_echo -i eth2 -a 3

	c. 10G eth0 <-> eth2, queue 0, cpu_core 3

		> ./musdk_pp2_pkt_echo -i eth0,eth2 -a 3

	d. 1G eth3, queue 0, cpu_core 3

		> ./musdk_pp2_pkt_echo -i eth3 -a 3


    2. Examples for two cores, with RSS::

	a. 10G eth0, queue 0,1, core 1,2

		> ./musdk_pp2_pkt_echo -i eth0 -c 2 -m 1:1 -a 1

	b. 10G eth2, queue 0,1, core 1,2

		> ./musdk_pp2_pkt_echo -i eth2 -c 2 -m 1:1 -a 1

	c. 10G eth0 <-> eth2, queue 0,1 core 1,2

		> ./musdk_pp2_pkt_echo -i eth0,eth2 -c 2 -m 1:1 -a 1


PKT_L3FWD
---------
The musdk_pkt_l3fwd is a basic L3 forwarding application supplied with MUSDK framework, and is based on destination
IP forwarding (LPM). Marvell L3 FWD application is extended to support full Layer3 - 5-tuple forwarding. Original destination
IP forwarding is supported as well.
User can choose between the L3 forwarding application types by using the next flag located in l3fwd_db.h file:

		#define LPM_FRWD

In order to enable the 5-tuple forwarding the application should be recompiled without the above #define.

Basic Configuration
~~~~~~~~~~~~~~~~~~~

A default configuration option is supplied by MUSDK framework through command line.
The L3 Forwarding applet is invoked by calling: musdk_pkt_l3fwd.

Mandatory OPTIONS::

		-i, --interface eth interfaces (comma-separated, no spaces)

For LPM forwarding::
		-r, --route SubNet,Intf[,NextHopMAC] NextHopMAC can be optional

For 5-tuple forwarding::
		-r, --route Src_SubNet,Dst_SubNet,Src_Port,Dst_Port,0-UDP/1-TCP,Dst_Intf[,NextHopMAC] NextHopMAC can be optional

Optional OPTIONS::

		-b <size>                Burst size, num_pkts handled in a batch.(default is 1024)
		--mtu <mtu>              Set MTU (default is 1500)
		-c, --cores <number>     Number of CPUs to use
		-a, --affinity <number>  Use setaffinity (default is no affinity)
		-s                       Maintain statistics
		-w <cycles>              Cycles to busy_wait between recv&send, simulating app behavior (default=0)
		--rxq <size>             Size of rx_queue (default is 2048)
		--cli                    Use CLI
		--routing-file           Use *.xml file
		--mac-dst-file           Use *.xml file
		?, -h, --help            Display help and exit.

Example for LPM forwarding::

		> ./musdk_pkt_l3fwd -i eth1,eth3 -r 192.168.1.0/24,eth3 -r 1.1.1.0/24,eth1

The above command will initialize eth1 and eth3 ports. in addition, all traffic with subnet 192.168.1.0/24 will
forward to eth3, and all traffic with subnet  r 1.1.1.0/24 will forward to eth1, other traffic will be dropped.

Example for 5-tuple forwarding::

		> musdk_pkt_l3fwd -i eth0,eth2 -r 1.1.1.10/24,192.168.1.10/24,1024,1024,0,eth0

The above command line will initialize eth0 and eth2 ports. in addition,  all traffic with 5 tuple: src ip: 1.1.1.10,
dst ip: 192.168.10, src port: 1024, dst port: 1024 and UDP,  will forward to eth0, other traffic will be dropped.


XML files
~~~~~~~~~
Marvell applet support optional configuration using xml files. When there are valid XML files the applet will take the
configuration first from command line and the rest configuration from XML file up to 64K entries.
The XML filename and path may be passed to the applet through command line (see --routing-file and
--mac-dst-file options above).

The following xml files supported:

	- Forwarding table for L3 FWD application based on LPM forwarding. Example: l3_routing_lpm.xml::

			<?xml version="1.0"?>
			<L3Route>
			  <RouteEntry>
				<Lpm>
					<Subnet>192.168.1.0/24</Subnet>
				</Lpm>
			  <OutIf>eth0</OutIf>
			  </RouteEntry>
			  <RouteEntry>
				<Lpm>
					<Subnet> 1.1.1.0/24</Subnet>
				</Lpm>
			  <OutIf>eth0</OutIf>
			  </RouteEntry>
			</L3Route>

	- Forwarding table for L3 FWD application based on 5-tuple forwarding. Example: l3_routing_hash.xml::

			<?xml version="1.0"?>
			<L3Route>
			  <RouteEntry>
				<Tuple>
					<SrcIP>1.1.1.10</SrcIP>
					<DstIP>192.168.1.10</DstIP>
					<SrcPort>1024</SrcPort>
					<DstPort>1024</DstPort>
					<Protocol>UDP</Protocol>
				</Tuple>
				<OutIf>eth1</OutIf>
			   </RouteEntry>
			  <RouteEntry>
				<Tuple>
					<SrcIP>192.168.1.10</SrcIP>
					<DstIP>1.1.1.10</DstIP>
					<SrcPort>1024</SrcPort>
					<DstPort>1024</DstPort>
					<Protocol>UDP</Protocol>
				</Tuple>
				<OutIf>eth3</OutIf>
			   </RouteEntry>
			</L3Route>

	- Next hop table containing a list of destination mac address. Example: if_to_mac.xml::

			<?xml version="1.0"?>
			<IF_MAC>
			  <Nexthop>
			    <If>eth0</If>
				<Mac>00:00:00:22:22:00</Mac>
			  </Nexthop>
			  <Nexthop>
			    <If>eth1</If>
				<Mac>00:00:00:22:22:01</Mac>
			  </Nexthop>
			  <Nexthop>
			    <If>eth2</If>
				<Mac>00:00:00:22:22:02</Mac>
			  </Nexthop>
			  <Nexthop>
			    <If>eth3</If>
				<Mac>00:00:00:22:22:03</Mac>
			  </Nexthop>
			</IF_MAC>


CLS-EXAMPLE
-----------


Functional Overview
-------------------
The 'musdk_cls_example' application is provided to show different examples on the use of MUSDK API's for configuring the
different ingress flow features:

		- L2 MAC address and VLAN filtering
		- Classification rules
		- QoS
		- Policer
		- Logical port

The application performs all required initializations, using the MUSDK API's, and configures the PPv2 according to the
selected feature. This application is only intended to show appropriate use of the API's. For each feature, a specific
use case is predefined and the system is configured according to this use case.

How To Run
~~~~~~~~~~
Run the application::

	> ./musdk_cls_example OPTIONS

Mandatory OPTIONS::

        -i, --interface <Eth-interface>
                  e.g. -i eth1
	Note: only one interface is permitted

The interface must be brought up using "ifconfig <ifname> up" before running the application

Optional OPTIONS::

	--filter		example for configuring L2 MAC address and VLAN filtering
	--cls_table		example for configuring 5-tuple classifier rule
	--qos			example for configuring QoS
	--policer		example for configuring policer rule
	--logical_port		example for configuring a logical port rule


L2 MAC address and VLAN filtering
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The following MUSDK API's are used in this example:

	- pp2_ppio_set_mac_addr
	- pp2_ppio_add_mac_addr
	- pp2_ppio_set_promisc
	- pp2_ppio_set_promisc
	- pp2_ppio_add_vlan

To run this example::

	> ./musdk_cls_example -i <eth> --filter

Once the application is invoked, it will enter cli mode, where different commands may be issued.

   The following CLI commands are supported::

	+-----------------------+---------------------------------------------------------------------------------------+
	| Command		| Description									       	|
	+=======================+=======================================================================================+
	| mac_addr_set		|  pp2_cls_cli_mac_addr_set <xx:xx:xx:xx:xx:xx>                                         |
	+-----------------------+---------------------------------------------------------------------------------------+
	| mac_addr_add		|  pp2_cls_cli_mac_addr_add <xx:xx:xx:xx:xx:xx>                       	                |
	+-----------------------+---------------------------------------------------------------------------------------+
	| promisc_state	       	| promisc_state 0 - for disable								|
        |                       |		1 - for enable								|
	+-----------------------+---------------------------------------------------------------------------------------+
	| vlan_set	       	| vlan_set <vlan_id>									|
	+-----------------------+---------------------------------------------------------------------------------------+

Classification rules
~~~~~~~~~~~~~~~~~~~~
The following API's are supported in this example:

	- pp2_cls_tbl_init
	- pp2_cls_tbl_add_rule

To run this example::

	> ./musdk_cls_example -i <eth> --cls_table

Once the application is invoked, it will configure the classifier with a 5-tuple table & one rule key as follows:
	- Create a classifier table with 5 tuples (source IP, destination IP, source port, destination port, IP protocol),
	  for the exact_match engine
	- Write one rule key as follows:
		- source IP:		1.1.1.10
		- destination IP:	192.168.1.10
		- source port:		0x400
		- destination port:	0x400
		- IP protocol:		17 (UDP)
	- Traffic matching this rule will be forwarded to traffic class 0

The application will enter a CLI mode where it is possible to see statistic counters per queue or port

QoS
~~~
The following API's are supported in this example:

	- pp2_cls_qos_tbl_init

To run this example::

	> ./musdk_cls_example -i <eth> --qos

Once the application is invoked, it will select to use VLAN_IP priority, and configure the QoS table as follows:
	- pcp value 1:			mapped to TC 1
	- pcp value 2:			mapped to TC 0
	- all other pcp values:		mapped to TC 2
	- dscp value 4:			mapped to TC 1
	- dscp value 6:			mapped to TC 3
	- all other dscp values:	mapped to TC 2

The application will enter a CLI mode where it is possible to dump the configured pcp and dscp qos tables.

Policer
~~~~~~~
The following API's are supported in this example:

	- pp2_cls_plcr_init

To run this example::

	> ./musdk_cls_example -i <eth> --policer

Once the application is invoked, it will create a policer with the following parameters:
	- Initialize the token units to bytes
	- Set the CIR to 200
	- Set the CBS to 0
	- Set the EBS to 0

The application will enter a CLI mode.

Logical port
~~~~~~~~~~~~
To run this example::

	> ./musdk_cls_example -i <eth> --logical_port

Once the application is invoked, it initializes the PPIO with the following logical port rules:
	- All UDP and TCP traffic is sent to user space
	- All other traffic is forwarded to kernel

The application will enter a CLI mode, were it is possible to display statistics per queue and port


CRYPTO-ECHO
------------

The crypto-echo application does the following operations:
	- receives packets from the network interface
	- encrypts the received packet (optional)
	- IPSec ESP encapsulation (tunnel or transport modes) only for
	  A8040/A7040/CN913X (optional)
	- decrypts the packet (optional)
	- IPSec ESP decapsulation (tunnel or transport modes) only for
	  A8040/A7040/CN913X (optional)
	- switches source and destination mac addresses (optional).
	- sends the packet to the network interface

Application usage (A8040, A7040, CN913X)::

	> musdk_pp2_crypto_echo OPTIONS

Application usage (A3700)::

	> musdk_neta_crypto_echo OPTIONS

Mandatory OPTIONS::

        -i, --interface <Eth-interfaces> (comma-separated, no spaces)
                  e.g. -i eth1,eth3

The interfaces must be brought up using "ifconfig <ifname> up" before running the application

Optional OPTIONS::

        -b             <size>    Burst size in bytes (default is 64)
        -c, --cores    <number>  Number of CPUs to use.
        -a, --affinity <number>  Use setaffinity (default is no affinity)
        -t             <mtu>     Set MTU in bytes (default is 1500)
        -v                       Increase verbose debug (default is 0)
                                 With every '-v', the debug is increased by one.
                                 0 - none, 1 - pkts sent/recv indication, 2 - full pkt dump
        --crypto-proto <proto>   Crypto protocol. Supports: [none, esp, ssl]. (default: none)
                                 Not supported for A3700.
        --tunnel                 IPSec tunnel mode. (default: transport)
                                 Valid only with "--crypto-proto esp"
        --ip6                    ESP/SSL over IPv6. (default: ESP/SSL over IPv4)
                                 Valid only with "--crypto-proto esp | ssl"
        --seq          <32|64>   Sequence number size 32 or 64 bits. (default: 64-bits)
                                 Valid only with "--crypto-proto esp | ssl"
        --capwap                 DTLS with capwap mode. (default: no capwap)
                                 Valid only with "--crypto-proto ssl"
        --ssl_version <ver>      SSL/TLS version. Support: [dtls_1_0, dtls_1_2]. (default: dtls_1_0)
                                 Valid only with "--crypto-proto ssl"
        --cipher-alg   <alg>     Cipher algorithm. Supports: [none, aes128, 3des]. (default: aes128)
        --cipher-mode  <alg>     Cipher mode. Support: [cbc, ecb]. (default: cbc)
        --auth-alg     <alg>     Authentication algorithm. Supports: [none, sha1]. (default: sha1)
        --dir          <dir>     Operation direction. Supports: [enc, dec, lb]. (default: lb)
        --no-echo                No swap of MAC addresses
        --use-events             Use events to wait for requests completed (default: no)"
        --cli                    Use CLI
        ?, -h, --help            Display help and exit.

Two CIOs are created for each CPU core, one for encryption and other for decryption.
If possible CIOs are taken from different engines.

For example:
   - in case of A8040 or CN9131 - encryption is done on cio-0:0, and decryption on cio-1:0
   - in case of A7040 or A3700 or CN9130 - encryption is done on cio-0:0, and decryption on cio-0:1

- If "--dir enc" - ingress packet will be only encrypted and will be sent out encrypted
- If "--dir dec" - ingress packet will be only decrypted and will be sent out decrypted
- If "--dir lb"  - ingress packet will be encrypted and then decrypted, so egress packet
		   must be the same as ingress.

- IPv6 mode is not supported, so --ip6 argument should not be set

In order to test crypto performance using musdk_pp2/neta_crypo_echo application, user should inject packets (udp or tcp),
into the MUSDK interface selected for the application.
Packets recived via one interface will be sent out via next interface in the list defined by "-i" argument.
Packets received via last interface in the list will be sent out via first interface in the list.
For example: "-i eth0,eth1,eth2" three flows will be created:
eth0 -> eth1
eth1 -> eth2
eth2 -> eth0


