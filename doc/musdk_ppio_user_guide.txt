Packet Processor IO (PPIO) User Guide
======================================

1. Introduction
===============

MUSDK PPIO driver and applications are part of the MUSDK package.

MUSDK PPIO driver provides capability of usage of the Packet Processing HW Engine (PP22)
directly from user-space applications with minimum overhead and high performance.

2.  Feature Set
===============

2.1	API Support
------------------------
2.1.1 PP2
---------
	Support all API's.

2.1.2 HIF
---------
	Support all API's.

2.1.3 BPOOL
---------
	Support all API's.
	- pp2_bpool_put_buffs() is replacing pp2_bpool_put_buff() in this version.
	  Currently both are supported, pp2_bpool_put_buff() is to be phased out soon.

2.1.4 PPIO
----------
	Init:
	-----
	- int pp2_ppio_init(struct pp2_ppio_params *params, struct pp2_ppio **ppio);
	- int pp2_ppio_enable(struct pp2_ppio *ppio)
	- int pp2_ppio_disable(struct pp2_ppio *ppio)
	- void pp2_ppio_deinit(struct pp2_ppio *ppio)

	Send/Receive:
	------------
	- int pp2_ppio_send(struct pp2_ppio *ppio, struct pp2_hif *hif, u8 qid, struct pp2_ppio_desc *descs, u16 *num)
	- int pp2_ppio_recv(struct pp2_ppio *ppio, u8 tc, u8 qid, struct pp2_ppio_desc *descs, u16 *num)
	- int pp2_ppio_get_num_outq_done(struct pp2_ppio *ppio, struct pp2_hif *hif, u8 qid, u16	*num)
	- int pp2_ppio_set_mtu(struct pp2_ppio *ppio, u16 mtu)
	- int pp2_ppio_get_mtu(struct pp2_ppio *ppio, u16 *mtu)
	- int pp2_ppio_set_mru(struct pp2_ppio *ppio, u16 len)
	- int pp2_ppio_get_mru(struct pp2_ppio *ppio, u16 *len)

	unsupported:
	- int pp2_ppio_send_sg(struct pp2_ppio *ppio, struct pp2_hif *hif, u8 qid, struct pp2_ppio_sg_desc *descs, u16 *num)

	Filtering:
	---------
	- int pp2_ppio_set_mac_addr(struct pp2_ppio *ppio, const eth_addr_t addr)
	- int pp2_ppio_get_mac_addr(struct pp2_ppio *ppio, eth_addr_t addr)
	- int pp2_ppio_set_uc_promisc(struct pp2_ppio *ppio, int en)
	- int pp2_ppio_get_uc_promisc(struct pp2_ppio *ppio, int *en)
	- int pp2_ppio_set_mc_promisc(struct pp2_ppio *ppio, int en)
	- int pp2_ppio_get_mc_promisc(struct pp2_ppio *ppio, int *en)
	- int pp2_ppio_add_mac_addr(struct pp2_ppio *ppio, const eth_addr_t addr)
	- int pp2_ppio_flush_mac_addrs(struct pp2_ppio *ppio, int uc, int mc)
	- int pp2_ppio_add_vlan(struct pp2_ppio *ppio, u16 vlan)
	- int pp2_ppio_remove_vlan(struct pp2_ppio *ppio, u16 vlan)
	- int pp2_ppio_flush_vlan(struct pp2_ppio *ppio)

	Outqueue:
	--------
	Support all pp2_ppio_outq_xxx API's, _excluding_ :
	- void pp2_ppio_outq_desc_set_dsa_tag(struct pp2_ppio_desc *desc)

	Support all pp2_ppio_inq_xxx API's, _excluding_ :
	- struct pp2_ppio * pp2_ppio_inq_desc_get_pp_io(struct pp2_ppio_desc *desc)
	- int pp2_ppio_inq_desc_get_ip_isfrag(struct pp2_ppio_desc *desc)

	Statistics:
	----------
	- int pp2_ppio_get_statistics(struct pp2_ppio *ppio, struct pp2_ppio_statistics *stats, int reset);
	- int pp2_ppio_inq_get_statistics(struct pp2_ppio *ppio, u8 tc, u8 qid, struct pp2_ppio_inq_statistics *stats, int reset);
	- int pp2_ppio_outq_get_statistics(struct pp2_ppio *ppio, u8 qid, struct pp2_ppio_outq_statistics *stats, int reset);

2.2	API limitations
-----------------------


2.3	Generic Limitations
---------------------------
- In this MUSDK version, the Linux kernel is widely used to bring up Control functionality,
  such as Classification and Link related functionality. It is assumed that interfaces are brought up
  in Linux and not tinkered with afterwards. See '3.2 HOW-TO' for further details.

- The system is initialized with interfaces that are "non-kernel" in the dts.
  These interfaces are reserved for musdk, and only they may be used by musdk.

- Linux interfaces in "non-kernel" state (intended for musdk) :
	- Do not produce a "link up" message, when they are brought up.
	- Do not support being stopped by Linux.
	- Do not support MTU change by Linux.


3. Feature description
======================

3.1	Pad and CRC offloads
----------------------------
Marvell PPv2.2 incorporates hardware support for packet CRC offload on Rx (CRC validation) and TX (CRC generation).
Pad and CRC is always enabled by the PPIO driver.

On receive side, padding is removed and CRC is validated automatically by the PPv2.2 hardware.
Therefore, MUSDK users receive frames without padding and CRC.

On transmit side, appropriate padding is appended to the frame, and CRC is calculated and added to the ETH frame.
Applications do not need to transmit frames with pad or CRC.

3.2	Checksum offload
------------------------
Marvell PPv2.2 incorporates hardware support for L3 and L4 checksum offloads.

On receive side, checkum is validated automatically by the PPv2.2 hardware. An error indication will be raised as part
of the Rx descriptor.

In transmit side, if MUSDK client SW would like to utilize this offload, appropriate fields in the Tx descriptor should be set using the appropriate API. The PPv2.2 HW will than calculate and generate L3 and/or L4 CSum.

3.3	Multicore support for RSS
---------------------------------
RSS is a statistical load balancing technique for distributing packet flows that arrive on the same ethernet port
between the cores of a multi-core CPU. Packets of the same flow are always directed to the same queue and CPU, and
therefore order within flows is preserved.
The load balancing improves the performance of Symmetrical Multi-Processing (SMP) cores.

RSS selects an RSS-queue according to key hash, which is mapped to an RX queue by configuration.

The supported hash types are as follows :
	- 2-tuple: IP source address and IP destination address (IPv4 and IPv6) or
	- 5-tuple: IP source address, IP destination address, IP protocol (TCP/UDP only), L4 source port, L4 destination
		   port (IPv4 and IPv6)

RSS is enabled by setting the hash_type parameter in pp2_ppio_inqs_params struct, and by setting the num_in_qs in
pp2_ppio_tc_params struct (according to the required number of RSS queues required).


3.4	MAC address filtering
------------------------------
MAC filtering is implemented by hardware on A70x0 and A80x0. MAC filtering is done in a dedicated parser &
L2 filtering TCAM by parsing the DMAC field.

- Filtering capability: For each MUSDK port, it is possible to configure up to 25 UC and MC filtering entries.
- By default, the maximum number of UC entries is 4, and the maximum number of MC entries is 21( 25 - max UC entries).
- It is possible to change the maximum number of UC entries by configuring the uc_filter_max module parameter in the
  kernel driver. Please refer to PPv2.2 Kernel Module Parameters chapter.
- MAC filtering behavior: The filtering behavior is defined as following.
	- UC filtering: If UC entries > max UC entries, the port is set to promisc mode.
	- MC filtering: If MC entries > (25- max UC entries), the port is set to all-multi mode.
	- From the behavior definition, there are 3 states for each port:
		- State1: non-promisc & non-allmulti
		- State2: Promisc mode
		- State3: non-promisc & allmulti

3.5	VLAN filtering
-----------------------
VLAN filtering is implemented by hardware on A70x0 and A80x0. VLAN filtering is done in a dedicated parser &
L2 filtering TCAM by parsing the VLAN ID field.

- Filtering capability: For each MUSDK port, it is possible to configure up to 10 VLAN ID filtering entries.
- VLAN filtering behaviour:
	- If no VLAN filtering entries are set, the system allows passing through all VLAN traffic.
	- Whenever one or more VLAN ID filters are configured, all VLAN traffic matching one of the VLAN ID will pass
	  through the system, while all VLAN traffic not matching one of the configured VLAN ID's will be dropped.
	- All non-VLAN traffic will pass through the system independently of the VLAN filter configured.

3.6	Statistics
------------------------------
All counters are 32-bit in Hardware.
Counters that are maintainable by nature, are 64-bit in musdk.

"Maintainable counters" are counters for which musdk can guarantee the HW counter will not reach U32_MAX,
assuming "statistic_maintenance" is performed.
The other (non-maintainable) counters will latch at U32_MAX, untill read by an API statistics call.

The "maintain_stats" parameter, which is provided during pp2_ppio_init() API determines
if periodic maintenance (triggered by internal threshold) will be performed during pp2_ppio_recv()/pp2_ppio_send() functions.

- pp2_ppio_inq_get_statistics():
	- 'enq_desc' counter is 64-bit, other inq_counters are 32-bit.

- pp2_ppio_outq_get_statistics():
	- all counters are 64-bit.

3.7 	Logical port
---------------------
If an interface is defined as logical port, traffic is shared between kernel and MUSDK according to received queue.
In this case, there is a need to define the rules by which the packet processor will know which traffic to send where.
In order to dsefine an interfase as logical port, it needs to be declared as such in the appropriate DTS file
(status = "shared" in DTS).

The PPv2 Kernel driver will treat this interface as a regular kernel interface, and MUSDK driver may configure
additional queues to this interface and retrieve the data from these queues.
In addition, the classifier needs to be configured to send selected traffic to these logical port queues.
This is performed through the logical port API (defined in mv_pp2_ppio.h file, struct pp2_ppio_log_port_rule_params).
Please refer to MUSDK classifier section "How To Run The Example Application" for an explanation of how to use and
configure this API.


4.  PKT_ECHO example application
================================

4.1 Functional Overview
------------------------
- Performs all required initializations, using the MUSDK API's.

	- #define PKT_ECHO_SUPPORT	(default=defined)
		  PKT_ECHO_SUPPORT will scrub the packet_header, by swapping L2 MAC addresses and IPV4 addresses.
		  Without it, pkt_echo application will not touch the packet at all.
	- #define USE_APP_PREFETCH	(default=defined)
		  USE_APP_PREFETCH prefetches the pkt_buffer of a packet that is few packets behind
		  the currently_handled packet in the receive_queue.
		  This significantly improves performance for usecases where packets are being modified.
	- #define PREFETCH_SHIFT	(7)
		  PREFETCH_SHIFT defines the number-of-packets-ahead in the receive_queue that is prefetched.
	- #define HW_BUFF_RECYLC	(default=undefined)
		  This mode makes use of Hardware Buffer Recycling:
		  The buffer of the transmitted packet is returned to the Buffer Manager automatically by Hardware.
		  Example usecase is when the bpool of received packet and the transmitted packet is the same.
	- #define SW_BUFF_RECYLCE	(default=undefined)
		  Mechanism demonstrating use of index_based cookies instead virtual_addresses for buffer_pointers.
	- #define HW_TX_CHKSUM_CALC	(default=undefined)
		  This causes packet_send to request Hardware to perform L3/L4 checksum calculation.


4.2 HOW-TO
----------
4.2.1 Base Configuration for 8040-DB:

		> ifconfig eth0 10.10.10.1 netmask 255.255.255.0 up
		> ifconfig eth1 11.11.11.1 netmask 255.255.255.0 up
		> ifconfig eth2 12.12.12.1 netmask 255.255.255.0 up
		> ifconfig eth3 13.13.13.1 netmask 255.255.255.0 up
		> sleep 1
		> insmod musdk_uio.ko
		> insmod mv_pp_uio.ko
		> insmod mvpp2x_sysfs.ko

4.2.2 Command parameters:

	See help in application.

4.2.3 Limitations
	- It is assumed the interface is brought up in Linux before being used by musdk_pkt_echo.

4.3 Examples
------------

Examples for single core, no RSS
--------------------------------
a. 10G eth0 queue 0, cpu_core 3

		> ./musdk_pkt_echo -i eth0 -a 3

b. 10G eth2, queue 0, cpu_core 3

		> ./musdk_pkt_echo -i eth2 -a 3

c. 10G eth0 <-> eth2, queue 0, cpu_core 3

		> ./musdk_pkt_echo -i eth0,eth2 -a 3

d. 1G eth3, queue 0, cpu_core 3

		> ./musdk_pkt_echo -i eth3 -a 3

Examples for two cores, with RSS
--------------------------------

a. 10G eth0, queue 0,1, core 1,2

		> ./musdk_pkt_echo -i eth0 -c 2 -m 1:1 -a 1

b. 10G eth2, queue 0,1, core 1,2

		> ./musdk_pkt_echo -i eth2 -c 2 -m 1:1 -a 1

c. 10G eth0 <-> eth2, queue 0,1 core 1,2

		> ./musdk_pkt_echo -i eth0,eth2 -c 2 -m 1:1 -a 1


4.  PKT_L3FWD example application
================================
The musdk_pkt_l3fwd is a basic L3 forwarding application supplied with MUSDK framework, and is based on destination
IP forwarding (LPM). Marvell L3 FWD application is extended to support full Layer3 - 5-tuple forwarding. Original destination
IP forwarding is supported as well.
User can choose between the L3 forwarding application types by using the next flag located in l3fwd_db.h file:

		#define LPM_FRWD

In order to enable the 5-tuple forwarding the application should be recompiled without the above #define.

5.3.3.1 Basic configuration

A default configuration option is supplied by MUSDK framework through command line.
The L3 Forwarding applet is invoked by calling: musdk_pkt_l3fwd.

Mandatory OPTIONS:

		-i, --interface eth interfaces (comma-separated, no spaces)

For LPM forwarding:
		-r, --route SubNet,Intf[,NextHopMAC] NextHopMAC can be optional

For 5-tuple forwarding:
		-r, --route Src_SubNet,Dst_SubNet,Src_Port,Dst_Port,0-UDP/1-TCP,Dst_Intf[,NextHopMAC] NextHopMAC can be optional

Optional OPTIONS:
		-b <size>                Burst size, num_pkts handled in a batch.(default is 1024)
		--mtu <mtu>              Set MTU (default is 1500)
		-c, --cores <number>     Number of CPUs to use
		-a, --affinity <number>  Use setaffinity (default is no affinity)
		-s                       Maintain statistics
		-w <cycles>              Cycles to busy_wait between recv&send, simulating app behavior (default=0)
		--rxq <size>             Size of rx_queue (default is 2048)
		--cli                    Use CLI
		--routing-file           Use *.xml file
		--mac-dst-file           Use *.xml file
		?, -h, --help            Display help and exit.

Example for LPM forwarding:

		> ./musdk_pkt_l3fwd -i eth1,eth3 -r 192.168.1.0/24,eth3 -r 1.1.1.0/24,eth1

The above command will initialize eth1 and eth3 ports. in addition, all traffic with subnet 192.168.1.0/24 will
forward to eth3, and all traffic with subnet  r 1.1.1.0/24 will forward to eth1, other traffic will be dropped.

Example for 5-tuple forwarding:

		> musdk_pkt_l3fwd -i eth0,eth2 -r 1.1.1.10/24,192.168.1.10/24,1024,1024,0,eth0

The above command line will initialize eth0 and eth2 ports. in addition,  all traffic with 5 tuple: src ip: 1.1.1.10,
dst ip: 192.168.10, src port: 1024, dst port: 1024 and UDP,  will forward to eth0, other traffic will be dropped.


5.3.3.3 XML files

Marvell applet support optional configuration using xml files. When there are valid XML files the applet will take the
configuration first from command line and the rest configuration from XML file up to 64K entries.
The XML filename and path may be passed to the applet through command line (see --routing-file and
--mac-dst-file options above).

The following xml files supported:
	- Forwarding table for L3 FWD application based on LPM forwarding.
		> example: l3_routing_lpm.xml

			<?xml version="1.0"?>
			<L3Route>
			  <RouteEntry>
				<Lpm>
					<Subnet>192.168.1.0/24</Subnet>
				</Lpm>
			  <OutIf>eth0</OutIf>
			  </RouteEntry>
			  <RouteEntry>
				<Lpm>
					<Subnet> 1.1.1.0/24</Subnet>
				</Lpm>
			  <OutIf>eth0</OutIf>
			  </RouteEntry>
			</L3Route>

	- Forwarding table for L3 FWD application based on 5-tuple forwarding.
		> example: l3_routing_hash.xml

			<?xml version="1.0"?>
			<L3Route>
			  <RouteEntry>
				<Tuple>
					<SrcIP>1.1.1.10</SrcIP>
					<DstIP>192.168.1.10</DstIP>
					<SrcPort>1024</SrcPort>
					<DstPort>1024</DstPort>
					<Protocol>UDP</Protocol>
				</Tuple>
				<OutIf>eth1</OutIf>
			   </RouteEntry>
			  <RouteEntry>
				<Tuple>
					<SrcIP>192.168.1.10</SrcIP>
					<DstIP>1.1.1.10</DstIP>
					<SrcPort>1024</SrcPort>
					<DstPort>1024</DstPort>
					<Protocol>UDP</Protocol>
				</Tuple>
				<OutIf>eth3</OutIf>
			   </RouteEntry>
			</L3Route>

	- Next hop table containing a list of destination mac address.
		> example: if_to_mac.xml

			<?xml version="1.0"?>
			<IF_MAC>
			  <Nexthop>
			    <If>eth0</If>
				<Mac>00:00:00:22:22:00</Mac>
			  </Nexthop>
			  <Nexthop>
			    <If>eth1</If>
				<Mac>00:00:00:22:22:01</Mac>
			  </Nexthop>
			  <Nexthop>
			    <If>eth2</If>
				<Mac>00:00:00:22:22:02</Mac>
			  </Nexthop>
			  <Nexthop>
			    <If>eth3</If>
				<Mac>00:00:00:22:22:03</Mac>
			  </Nexthop>
			</IF_MAC>


6. Cls_demo example application
===============================
- The 'musdk_cls_demo' example application allows configuring several classifier related features as follows:
	- Classifier table in PPv2 classifier
	- MAC address filtering
	- VLAN filtering
	- Promiscuous mode
	- QoS

- For a full description of the application and how to run, please refer to MUSDK classifier 'how-to' section.

