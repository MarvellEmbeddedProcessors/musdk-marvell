Packet Processor IO (PPIO) User Guide
======================================

1. Introduction
===============

MUSDK PPIO driver and applications are part of the MUSDK package.

MUSDK PPIO driver provides capability of usage of the Packet Processing HW Engine (PP22)
directly from user-space applications with minimum overhead and high performance.

2.  Feature Set
===============

2.1	Supported API's
------------------------
	- int pp2_init(struct pp2_init_params *params)
	- void pp2_deinit(void)
	- int pp2_bpool_get_buff(struct pp2_hif *hif, struct pp2_bpool *pool, struct pp2_buff_inf *buff)
	- int pp2_bpool_put_buff(struct pp2_hif *hif, struct pp2_bpool *pool, struct pp2_buff_inf *buff)
	- int pp2_hif_init(struct pp2_hif_params *params, struct pp2_hif **hif)
	- int pp2_ppio_get_num_outq_done(struct pp2_ppio *ppio, struct pp2_hif *hif, u8 qid, u16 *num)
	- int pp2_ppio_recv(struct pp2_ppio *ppio, u8 tc, u8 qid, struct pp2_ppio_desc *descs, u16 *num)
	- int pp2_ppio_enable(struct pp2_ppio *ppio)
	- int pp2_ppio_disable(struct pp2_ppio *ppio)

	All pp2_ppio_outq_xxx API's, _excluding_ following:
		- void pp2_ppio_outq_desc_set_dsa_tag(struct pp2_ppio_desc *desc);

	All pp2_ppio_inq_xxx API's, _excluding_ following:
		- struct pp2_ppio * pp2_ppio_inq_desc_get_pp_io(struct pp2_ppio_desc *desc)
		- int pp2_ppio_inq_desc_get_ip_isfrag(struct pp2_ppio_desc *desc)

	int pp2_ppio_set_mac_addr(struct pp2_ppio *ppio, const eth_addr_t addr);
	int pp2_ppio_get_mac_addr(struct pp2_ppio *ppio, eth_addr_t addr);
	int pp2_ppio_set_uc_promisc(struct pp2_ppio *ppio, int en);
	int pp2_ppio_get_uc_promisc(struct pp2_ppio *ppio, int *en);
	int pp2_ppio_set_mc_promisc(struct pp2_ppio *ppio, int en);
	int pp2_ppio_get_mc_promisc(struct pp2_ppio *ppio, int *en);
	int pp2_ppio_add_mac_addr(struct pp2_ppio *ppio, const eth_addr_t addr);
	int pp2_ppio_remove_mac_addr(struct pp2_ppio *ppio, const eth_addr_t addr);
	int pp2_ppio_flush_mac_addrs(struct pp2_ppio *ppio, int uc, int mc);
	int pp2_ppio_add_vlan(struct pp2_ppio *ppio, u16 vlan);
	int pp2_ppio_remove_vlan(struct pp2_ppio *ppio, u16 vlan);

2.2	API's with limitations
------------------------------
	- int pp2_bpool_init(struct pp2_bpool_params *params, struct pp2_bpool **bpool)
		- 'rss_tbl_reserved_map' parameter is not supported

	- int pp2_ppio_init(struct pp2_ppio_params *params, struct pp2_ppio **ppio)
		- The following params are not supported:
			- 'type'
			- 'inqs_params.hash_type'
			- 'inqs_params.tcs_params.use_hash

(*) - The remaining PP2 API's are not supported in this version.


2.3	Generic Limitations
---------------------------
In this MUSDK version, the Linux kernel is widely used to bring up Control functionality,
such as Classification and Link related functionality. It is assumed that interfaces are brought up
in Linux and not tinkered with afterwards. See '3.2 HOW-TO' for details.


3.  PKT_ECHO example application
================================

3.1	Functional Overview
---------------------------
	- The 'musdk_pkt_echo' example application performs loopback of packets for a single port.
	- Performs all required initializations, using the MUSDK API's.
	- By default, 'musdk_pkt_echo' application will scrub the packet_header, by swapping L2 MAC addresses and IPV4 addresses.
	- It has two functional options, currently defined by #defines in pkt_echo.c :
		- The option to not touch the packet at all. (remove #define PKT_ECHO_SUPPORT in pkt_echo.c)
		- The option to calculate IPV4/L4 checksums for all packets that are sent (add #define HW_TX_CHKSUM_CALC in pkt_echo.c)

	- 'musdk_pkt_echo' supports one of the following ports:
		- CP0-port0(10G port), in A7040/A8040.
		- CP1-port0(10G port), in a A8040; see note below.

	- In order to use CP1-port0(10G port) in A8040, change the definition in "src/include/env/xflags.h"

			#define PP2_SOC_NUM_PACKPROCS	2   /* default is 1 */


3.2 HOW-TO RUN
--------------
	a. Preferrably use a A8040-A1-DB or A7040-A0-DB board.
	b. Compile code as written in the "Getting Started" section.
		- Skip sam compilation phase.
		- Include ALL patches.
	c. In Linux, bring up two interfaces. (eth0 or eth2)=musdk interface, eth1=linux interface.

	Note: The musdk interface does not produce a "link up" message.
	See following output:

			# ifconfig eth0 11.11.11.1 up
			IPv6: ADDRCONF(NETDEV_UP): eth0: link is not ready
			# ifconfig eth1 10.4.51.189 up
			IPv6: ADDRCONF(NETDEV_UP): eth1: link is not ready
			# IPv6: ADDRCONF(NETDEV_CHANGE): eth1: link becomes ready

	d. Bring up the modules. Below output is for a 8040-A1-DB:

			# cd /
			# insmod musdk_uio.ko
			Registered cma device: uio-cma
			# insmod mv_pp_uio.ko
			Registered 2 uio devices, having 6 register maps attached
			Registered 2 uio devices, having 6 register maps attached

	e. Run the musdk_pkt_echo application:

			# ./musdk_pkt_echo -i eth1 -c 1 -m f:1

	Parameters:
	- '-i eth1' is the  internal interface name to 'musdk_pkt_echo', it is _not_ the linux netdevice.
	- '-i eth1' is the equivalent of the eth0 Linux netdevice.
	- '-i eth4' is the equivalent of the eth2 Linux netdevice on an 8040-A1-DB.
	- '-c 1' stands for single cpu (single thread), similar to netmap application.
	- '-m f:1' stands for '<first_thread_cpu_mask>:<mask_shift_for_following_cpus>', similar to netmap application.

3.  Cls_demo example application
================================
	- The 'musdk_cls_demo' example application allows for configuring 5-tuple table in PPv2 classifier,
	  as well as to configure MAC address filtering,  VLAN filtering and promiscuous mode.
	- For a full description of the application and how to run, please refer to MUSDK classifier 'how-to' section.


