NETA IO User Guide
==================

Introduction
------------

MUSDK NETA driver and test applications are part of the whole MUSDK package and
applicable for A3700 platforms.

MUSDK NETA driver provides capability of usage NETA HW unit directly from user-space
applications with minimum overhead and high performance.

Kernel Dependencies
~~~~~~~~~~~~~~~~~~~
The MUSDK NETA driver depends on the KS driver for following purposes:
	- Read DTS file and extract all common HW resources information as well as all the KS specific HW resources (e.g. Ports, etc.).
	- Initialize and maintain PHY and link state for all NICs (both KS and US), and expose APIâ€™s (ioctl/ethtool/sysfs) for NIC and Phy functionality on the MUSDK ports.

  .. Note::
	NICs that are associated with US MUSDK are initialized by the KS driver with a default MAC-address (according to DTS attributes)


Resource Mapping
~~~~~~~~~~~~~~~~
PPIO
^^^^
	- The PPIO object is the MUSDK presentation of an interface.
	- A PPIO object is a logical port capable of receiving and transmitting packets.
	- As a minimum, a PPIO has a collection of RX queues (RX-Qs) and TX queues (TX-Qs), at least one of each.


Supported Features
------------------

NETA initialization
~~~~~~~~~~~~~~~~~~~
::

	int neta_init(void);

- Initialize the global NETA resources.

NETA shutdown
~~~~~~~~~~~~~
::

	int neta_deinit(void);

- Destroy NETA driver and free global resources.


PPIO
~~~~
	Init:
		- neta_ppio_init
		- neta_ppio_deinit
		- neta_ppio_enable
		- neta_ppio_disable

	Send/Receive:
		- neta_ppio_send
		- neta_ppio_recv
		- neta_ppio_get_num_outq_done

	Filtering:
		- Not supported.

	Outqueue:
		- Support all neta_ppio_outq_xxx API's

	Inqueue:
		- Support all neta_ppio_inq_xxx API's

	Statistics:
		- neta_ppio_get_statistics
		  Read and return all MAC MIB counters

General Limitations
~~~~~~~~~~~~~~~~~~~
The system is initialized with interfaces that are "non-kernel" in the dtb file.
These interfaces are reserved for musdk, and only they may be used by musdk.

Linux interfaces in "non-kernel" state (intended for MUSDK) :
	- Do not support being stopped by Linux.
	- Do not support MTU change by Linux.

When setting the tx descriptor, the length field needs to be written after the offset. Otherwise the length field is overwritten
The example applications do not perform MTU size checking. In case traffic is sent with MTU size bigger than the configured MTU size, packets will not be discarded but rather truncated.

Features Description
--------------------

Pad and CRC offloads
~~~~~~~~~~~~~~~~~~~~
Marvell NETA hardware support for packet CRC offload on Rx (CRC validation) and TX (CRC generation).
Pad and CRC is always enabled by the PPIO driver.

On receive side, padding is removed and CRC is validated automatically by the hardware.
Therefore, MUSDK users receive frames without padding and CRC.

On transmit side, appropriate padding is appended to the frame, and CRC is calculated and added to the ETH frame.
Applications do not need to transmit frames with pad or CRC.

Checksum offload
~~~~~~~~~~~~~~~~
Use neta_ppio_outq_desc_set_proto_info().

Marvell NETA hardware support for L3 and L4 checksum offloads.
On receive side, checksum is validated automatically by the hardware. An error indication will be raised as part
of the Rx descriptor.

On transmit side, if MUSDK client SW would like to utilize this offload, appropriate fields in the Tx descriptor should be set using the appropriate API. The NETA HW will than calculate and generate L3 and/or L4 CSum.

MAC address filtering
~~~~~~~~~~~~~~~~~~~~~
Use neta_port_set_mac_addr() and neta_port_add_mac_addr().

MAC filtering is implemented by NETA hardware.
For each MUSDK port, it is possible to configure up to 16 UC, 256 IP MC and 256 other MC filtering entries.

Promiscuous and multicast mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Use neta_port_set_promisc():

When promisc mode is enabled, the port is set to promisc mode and all unicast and multicast traffic will pass through.
When promisc mode is disabled, the port is set to normal mode and only unicast and multicast traffic defined in MAC address filtering will pass through.

Use neta_port_set_mc_promisc():

When all-multi mode is enabled, the port is set to all multicast mode and all unicast and multicast traffic will pass through.
When all-multi mode is disabled, the port is set to normal mode and only multicast traffic defined in MAC address filtering will pass through.

Statistics
~~~~~~~~~~
MAC MIB counters can be obtained by neta_port_get_statistics().


NETA Test Applications
----------------------
To run MUSDK NETA test applications, mv_neta_uio.ko kernel modules must be loaded before.
For more details please refer to musdk_get_started.txt chapter "5. Insert kernel modules".

musdk_neta_pkt_echo
~~~~~~~~~~~~~~~~~~~
Basic configuration for Armada-37x0 DB, both ports belong to User Space::

		> ifconfig eth0 up
		> ifconfig eth1 up
		> sleep 1
		> insmod musdk_uio.ko
		> insmod mv_neta_uio.ko

Command parameters:

	Usage: musdk_neta_pkt_echo OPTIONS

	Mandatory OPTIONS::

		-i, --interface <Eth-interfaces> (comma-separated, no spaces, min 1, max 2)

	Optional OPTIONS::

		-b <size>                Burst size, num_pkts handled in a batch. Currently not supported.
					 (default is 256)
		--mtu <mtu>              Set MTU (default is 1500). Currently not supported.
		-c, --cores <number>     Number of CPUs to use
		-s                       Maintain statistics. Currently not supported.
		--rxq <size>             Size of rx_queue. Currently not supported. (default is 512)
		--cli                    Use CLI.
		?, -h, --help            Display help and exit.

    Limitations:
	- It is assumed the interface is brought up in Linux before being used by musdk_neta_pkt_echo.
	- No RSS support.


    Example for single core::

	> ./musdk_neta_pkt_echo -i eth0

    Example for single core and two ports::

	> ./musdk_neta_pkt_echo -i eth0,eth1

    Example for two core and two ports::

	> ./musdk_neta_pkt_echo -i eth0,eth1 -c 2

    Example for single core and two ports and CLI ::

	> ./musdk_neta_pkt_echo -i eth0,eth1 --cli

Available commands::

        help
                Usage: help
                Help; print command description/usage
        ?
                Usage: ?
                Alias for help
        q
                Usage: q
                Quit; TODO
        prefetch
                Usage: prefetch <shift>
                Prefetch ahead shift (number of buffers)

        stat
                Usage: stat <reset>
                Show app statistics

        pstat
                Usage: pstat <if_name>
                Show port MAC statistics

        plink
                Usage: plink <if_name>
                Show port link status

        mac_addr_set
                Usage: mac_addr_set <if_name> <xx:xx:xx:xx:xx:xx>
                Set ppio MAC address

        mac_addr_add
                Usage: mac_addr_add <if_name> <xx:xx:xx:xx:xx:xx>
                Add ppio MAC address

        promisc_state
                Usage: promisc_state <if_name> 0 - for disable, 1 - for enable
                Enable/disable promiscuous mode


