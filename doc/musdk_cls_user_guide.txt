Packet Processor Classifier (CLS) User Guide
============================================

1. Introduction
===============
MUSDK Classifier and applications are part of the MUSDK package.

MUSDK Classifier provides the capability of configuring the Packet Processor HW Classifier Engine
from user-space applications.

2.  Feature Set
===============

2.1 Supported API's
-------------------
	- int pp2_cls_tbl_init(struct pp2_cls_tbl_params *params, struct pp2_cls_tbl **tbl);
	- void pp2_cls_tbl_deinit(struct pp2_cls_tbl *tbl);
	- int pp2_cls_qos_tbl_init(struct pp2_cls_qos_tbl_params *params, struct pp2_cls_tbl **tbl);
	- void pp2_cls_qos_tbl_deinit(struct pp2_cls_tbl *tbl);
	- int pp2_cls_tbl_add_rule(struct pp2_cls_tbl *tbl, struct pp2_cls_tbl_rule *rule, struct pp2_cls_tbl_action *action);
	- int pp2_cls_tbl_modify_rule(struct pp2_cls_tbl *tbl, struct pp2_cls_tbl_rule *rule, struct pp2_cls_tbl_action	*action);
	- int pp2_cls_tbl_remove_rule(struct pp2_cls_tbl *tbl, struct pp2_cls_tbl_rule *rule);

2.3 General Limitations
-----------------------
	- Only one classifier table is supported
	- Default queue can not be set from MUSDK API. The default queue is taken from Kernel configuration. For
	  configuring the default queue, please refer to PPv2.2 Kernel Module Parameters chapter.
	- By default, MUSDK supports only one Traffic Class (TC). For configuring multiple TC's, the kernel driver
	  needs to be configured with multiple queues. For confifuring multiple queues (up to 8), please refer to
	  PPv2.2 Kernel Module Parameters chapter.
	- MUSDK classifier database and Kernel database are not synchronized yet, therefore there is no support for
	  simultaneous updates in Kernel/User Space.
	- Maskable engine was added to the version, although not all capabilities were tested (see 4.3 Classifier
	  pre-defined capabilities below). Some of the capabilities may not work properly.

2.4 Known issues
----------------
	- It is possible to add new flows even if the same flow was just added
	- After MUSDK is initialized, it is not possible to add more flows through Kernel (i.e. through sysfs)
	- The musdk_cls_demo application supports configuration of only a single port at a time

3.  Feature Description
=======================
The Armada A70x0/A80x0 contains a Parser unit and a Classifier unit.

3.1 Parser unit
---------------
The Parser unit performs configurable pipelined parsing for interleaved arriving packets. The Parser unit identifies
the packet header and forwards the results to the classifier controller.
The parser main role is parsing, Identification of the networking protocol stack as passing indications to the Classifier block.
Processing of packets of all networking ports are done with a single TCAM with flexible configuration and partitioning,
through several lookup iterations.
Following is a list of default parsing fields:
	- Single and double VLAN tagged packets (ether type  0x8100 and 0x88a8)
	- Ether type parse: Ether type parser includes:
		- ARP (0x0806)
		- IPV4 (0x0800, non-opt and opt, no PPPoE and over PPPoE)
		- IPV6 (0x86dd, no PPPoE and over PPPoE)
		- unknown ether type
	- L4 info parse: L4 info parse includes:
		- Both TCP and UDP including IPV4 non-frag and frag
		- unknown L4 info
	- PPPoE parse: (ether type 0x8864)
	- IGMP parsing
	- Broadcast, unicast(MTM and non-MTM), multicast parse

3.2 Classifier unit
-------------------
The Classifier unit performs packets classification. Packets classification is done based on the parsing results
received from the Parser and on lookups performed by the various classification engines.
The Classifier generates the various actions required for the packet, such as:
	- Drop
	- Set target queue

These actions are transferred to the RX FIFO.

The following steps are taken in each packet classification:
	- Select classification flow according to Lookup ID and physical Port ID.
	- Issue lookup commands as defined by the classification flow.
	- Execute lookup commands by the search engines.
	- Resolve the classification attributes in priority order.

The classification engines consist of the following:
	- Maskable: the Maskable Engine provides TCAM based lookup for a key and generates the required
	  actions based on the lookup results
	- Exact Match: the Exact Match engine performs lookup of a key in an internal preconfigured database
	 (Exact Match Search Engine)
	- RSS: The RSS engineâ€™s task is to enable statistical load balancing between the cores of a multi-core CPU

- The task of the classification engines is to perform the lookups and generate the resulting actions to the actions resolver
- The action resolver resolves the received actions and generates the Classification results

3.3 Classifier pre-defined capabilities
---------------------------------------
In current release, the following capabilities are supported by MUSDK classifier.

	| 			Capability				|
	|-------------------------------|-------------------------------|
	| Classifier			| Engine support		|
	|-------------------------------|-------------------------------|
	| SIP+DIP+SPORT+DPORT+PROT	| Exact match			|
	|-------------------------------|-------------------------------|
	| SPORT+DPORT+PROT		| Maskable 			|
	|-------------------------------|-------------------------------|
	| DPORT+PROT			| Maskable			|
	|-------------------------------|-------------------------------|
	| SPORT+PROT			| Maskable			|
	|-------------------------------|-------------------------------|
	| DSCP				| Maskable			|
	|-------------------------------|-------------------------------|
	| DMAC + VID			| Maskable			|
	|-------------------------------|-------------------------------|
	| DMAC				| Maskable			|
	|-------------------------------|-------------------------------|
	| DIP + VID			| Maskable			|
	|-------------------------------|-------------------------------|
	| DIP				| Maskable			|
	|-------------------------------|-------------------------------|
	| SMAC + VID			| Maskable			|
	|-------------------------------|-------------------------------|
	| SMAC				| Maskable			|
	|-------------------------------|-------------------------------|
	| SIP + VID			| Maskable			|
	|-------------------------------|-------------------------------|
	| SIP				| Maskable			|
	|-------------------------------|-------------------------------|
	| DSCP + VID			| Maskable			|
	|-------------------------------|-------------------------------|
	| SIP				| Maskable			|
	|-------------------------------|-------------------------------|
	| DIP + SIP + VID		| Exact match			|
	|-------------------------------|-------------------------------|
	| DIP + SIP + VID		| Exact match			|
	|-------------------------------|-------------------------------|
	| DMAC + SIP + VID		| Exact match			|
	|-------------------------------|-------------------------------|

Notes:
	1. all entries which are defined as Maskable engine support may also be configured as exact match engine
	2. only one table may be defined
	3. Not all combinations were tested

3.4 QoS
---------
Quality of Service is supported in classifier. The QoS maps traffic types to queues.
The following traffic types are supported:
	- VLAN priority:	QoS according to VLAN-priority (outer tag) if exists; otherwise, use default
	- IP-ToS priority:	QoS according to IP-priority (i.e. DSCP) if exists; otherwise, use default
	- VLAN_IP priority:	QoS according to VLAN-priority (outer tag) if exists;
				otherwise, use IP-priority (i.e. DSCP) if exists; otherwise, use default
	- IP_VLAN priority:	QoS according to IP-priority (i.e. DSCP) if exists;
				otherwise, use VLAN-priority (outer tag)  if exists; otherwise, use default


4. The 'cls_demo' example application
=====================================

4.1 Functional Overview
-----------------------
	- The 'musdk_cls_demo' example application allows for configuring the following functionality:
		- classification rules
		- logical port parameters
		- QoS
		- MAC address filtering
		- VLAN filtering
		- RSS
	- Performs all required initializations, using the MUSDK API's.
	- Includes an "echo" mode allowing to loopback traffic sent to the specific port openned. This allows for
	  testing the configured feature.

4.2 How To Run The Example Application
---------------------------------------
a. Preferrably use a A8040-A1-DB or A7040-A0-DB board.
b. Compile code as written in the "Getting Started" section.
	- Skip SAM compilation phase.
	- Make sure ALL patches are applied.
c. In Linux, bring up the required interfaces
d. Bring up the modules. Below output is for a 8040-A1-DB:

				> cd /
				> insmod musdk_uio.ko
				Registered cma device: uio-cma
				> insmod mv_pp_uio.ko
				Registered 2 uio devices, having 6 register maps attached
				Registered 2 uio devices, having 6 register maps attached

	In case MAC filtering is used for configuring unicast address, or RSS is used, the following is also needed

				> insmod mvpp2x_sysfs.ko

e. Run the musdk_cls_demo application:

					> ./musdk_cls_demo -i <eth>

   Parameters:
	- '-i eth0' is the linux interface name.
	- '--echo' - sets the cls_demo application in echo mode, enabling loopback of received traffic over the
	  same openned port
	- '--logical_port_params' when the interface is a logical port, this parameter needs to be present,
	  in which case the application requires to configure the logical port parameters (see 2 below)
	- '--ppio_tag_mode' when a special tag mode is to be used as filtering for the logical port
	- '--hash_type' sets the hash type to be used for RSS according to the following values:
		- none:		hash is disabled
		- 2-tuple:	hash is calculated using IP source address and IP destination address (IPv4 and IPv6)
		- 5-tuple:	hash is calculated using IP source address, IP destination address, IP protocol(TCP/UDP only),
				L4 source port, L4 destination port (IPv4 and IPv6)

  Examples:

  1. For MUSDK port

					> ./musdk_cls_demo -i <eth> --echo

  2. For logical port

					> ./musdk_cls_demo -i ppio-0:0 --echo --logical_port_params

	When the --logical_port_params is provided, the application will prompt for the user to enter
	the relevant logical_port classifier parameters as follows:

	please enter logical port params:
		* --target                (dec)
		* --num_proto_rule_sets   (dec)
		* --num_rules             (dec)
		* --rule_type             (dec)
		* --proto                 (dec)
		* --proto_val             (dec)
		* --special_proto         (dec)
		* --special_fields        (dec)
		* --field_val             (dec)

	where:

			--target:		Indicate whether the network protocol rules defined will be used for
						the logical-port (target = 0) or for the NIC (target = 1)
						NOTE: In current release only target = 0 is supported
			--num_proto_rule_sets: 	Number of protocol rule sets to be defined
						NOTE: In current release only num_proto_rule_sets = 1 is supported
			--num_rules:		Number of rules defined for each protocol set
			--rule_type:     	Defines if the rule is a protocol rule or a special field in a protocol
						rule_type = 0 (protocol rule), rule_type = 1 (protocol field rule)
			--proto         	Defines the protocol to match
						NOTE: In current release only UDP or TCP protocols are supported
						(values according to mv_net.h file)
						proto = 9 (TCP), proto = 10 (UDP)
			--proto_val             Indicates whether the selected network protocol is to be matched
						or the negated network protocol is to be matched
						i.e. if VLAN protocol is specified:
						val = 0 indicates all tagged frames are to be matched
						val = 1 indicates all untagged frames are to be matched
						NOTE: In current release protocol_val = 0 is supported
			--special_proto 	Defines a network special protocol to be supported by logical port
						NOTE: in current release, the following special protocols are supported:
						special_proto = 2 (DSA tag)
			--special_fields        NOTE: in current release, the following special protocols fields are supported:
						special_field = 0 (DSA tag mode)
			--field_val             Defines the value of the specified special protocol field
						the available values are defined in mv_net.h under mv_net_eth_dsa_tag_mode_values:
						i.e. field_val = 3 for DSA tag mode forward

	Example configurations for logical port:

	logical port + tcp filter:

					> musdk_cls_demo -i eth1 --echo --logical_port_params
					  --target 0 --num_proto_rule_sets 1 --num_rules 1 --rule_type 0
					  --proto 9 --proto_val 0

	logical port + tcp&udp filter:

					> musdk_cls_demo -i eth1 --echo --logical_port_params
					  --target 0 --num_proto_rule_sets 1 --num_rules 2
					  --rule_type 0 --proto 9 --proto_val 0
					  --rule_type 0 --proto 10 --proto_val 0

  3. For logical port with special tag filtering

					> musdk_cls_demo -i eth1 --echo --logical_port_params --ppio_tag_mode

	please enter tag_mode:
		* --none 		no tag
		* --dsa			dsa tag
		* --extended_dsa	extended dsa tag

	Example configuration for logical port with DSA tag mode filtering:

					> musdk_cls_demo -i eth1 --echo --logical_port_params --ppio_tag_mode
					  --dsa
					  --target 0 --num_proto_rule_sets 1 --num_rules 4
					  --rule_type 1 --special_proto 2 --special_fields 0 --field_val 3

f. Once the application is invoked, it will enter cli mode, where different commands may be issued.
   The following cli commands are supported:


	| Command		| Description									       	|
	|-----------------------|---------------------------------------------------------------------------------------|
	| help          	| print command description/usage							|
	|-----------------------|---------------------------------------------------------------------------------------|
	| ?          	     	| Alias for help									|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_tbl_init		| create a classifier table according to key and default action				|
	|			|	cls_tbl_init --engine_type --tc --drop(opt) --key				|
	|			|											|
	|			| 	--engine_type  (string) exact_match, maskable					|
	|			| 	--tc           (dec) 1..8   - By default only 1is supported, unless kernel is	|
	|			|                	configured to support more than	one queue (refer to Marvell SDK	|
	|			|			for ARMADA Embedded SoCs documentation, under PPv2.2 Kernel  	|
	|			|			Module Parameters chapter					|
	|			| 	--drop         (no argument) optional						|
	|			| 	--key          (string) the following keys are functional in this release:	|
	|			|				ip4_src   - ipv4, souce address				|
	|			|				ip4_dst   - ipv4, destination address			|
	|			|				ip4_proto - ipv4, proto					|
	|			|				l4_src    - layer4, source port				|
	|			|				l4_dst    - layer4, destination port			|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_tbl_deinit	| remove a specified table								|
	|			| 	cls_tbl_deinit --table_index (dec) index to existing table			|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_rule_key          | add a classifier rule key to existing table						|
	|			|       cls_rule_key --add    --table_index --tc --drop(optional) --size --key --mask	|
	|			|	cls_rule_key --modify --table_index --tc --drop(optional) --size --key --mask	|
	|			|	cls_rule_key --remove --table_index --size --key --mask				|
	|			|											|
	|			|	--table_index   (dec) index to existing table					|
	|			|	--tc            (dec) 1..8							|
	|			|	--drop          (optional)(no argument)						|
	|			|	--size          (dec) size in bytes of the key					|
	|			|	--key           (dec or hex) key						|
	|			|			i.e ipv4: 192.168.10.5						|
	|			|		   	i.e ipv6: 2605:2700:0:3::4713:93e3				|
	|			|		   	i.e port: 0x1234						|
	|			|		   	i.e udp: 17(IPPROTO_UDP)					|
	|			|		   	i.e tcp: 6(IPPROTO_TCP)						|
	|			|	--mask          (hex) mask for the key (if maskable is used)			|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_qos_tbl_init	| create a QoS classifier table								|
	|			|	cls_qos_tbl_init --type --pcp_default --pcp_idx --pcp_val 			|
	|			|			 --dscp_default --dscp_idx --dscp_val				|
	|			|											|
	|			|	--type  (string) none, vlan, ip, vlan_ip, ip_vlan				|
	|			|	--pcp_default   TC number - default TC for all table values			|
	|			|			except for values defined in pcp_idx and pcp_val		|
	|			|	--pcp_idx	index in pcp_map table						|
	|			|	--pcp_val	TC value in pcp_map table					|
	|			|			pcp_idx and pcp_val need to be set together, and more than one	|
	|			|			idx/val tuple may be defined 					|
	|			|	--dscp_default  TC number - default TC for all table values			|
	|			|			except for values defined in pcp_idx and pcp_val		|
	|			|	--dscp_idx	index in pcp_map table						|
	|			|	--dscp_val	TC value in pcp_map table					|
	|			|			pcp_idx and pcp_val need to be set together, and more than one	|
	|			|			idx/val tuple may be defined 					|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_qos_tbl_deinit	| remove a specified qos table								|
	|			| 	cls_qos_tbl_deinit --qos_table_index (dec) index to existing table		|
	|-----------------------|---------------------------------------------------------------------------------------|
	| mac_addr		| set/get/add/remove/flush ppio MAC address						|
	|			|	mac_addr --set <xx:xx:xx:xx:xx:xx>						|
	|			|	mac_addr --get									|
	|			|	mac_addr --add <xx:xx:xx:xx:xx:xx>						|
	|			|	mac_addr --remove <xx:xx:xx:xx:xx:xx>						|
	|			|	mac_addr --flush --uc --mc							|
	|-----------------------|---------------------------------------------------------------------------------------|
	| promisc  	       	| set/get ppio unicast/multicast promiscuous mode					|
	|			| 	promisc --<uc/mc> --<on/off/get>						|
	|-----------------------|---------------------------------------------------------------------------------------|
	| vlan          	| set/remove/flush ppio vlan filter							|
	|			| 	vlan --set <vlan_id>								|
	|			|	vlan --remove <vlan_id>								|
	|			|	vlan --flush									|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_print_rxq_counters| print rxq counters									|
	|			| 	cls_print_rxq_counters --tc							|
	|			|											|
	|			|	--tc            (dec) traffic class number					|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_table_dump	| display classifier defined tables							|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_fl_log_rls_dump   | dump all logical flow ID and rule offset						|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_lkp_hits_dump     | dump all hit decode entry and its DB information					|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_fl_hits_dump      | dump all hit flow table entry								|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_fl_rls_dump       | dump all logical flow ID rules							|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_c3_rule_hit_dump  | dump exact_match entries according to type and index					|
	|			| 	cls_c3_rule_hit_dump --type --var (no arguments)				|
	|			|											|
	|			|	--type  (dec) exact_match dump type, 0: logic idx, 1:hash idx, 2:lookup type	|
	|			|	--var   (dec) value according to type, type 0/1:idx, type 2: lookup type	|
	|			|	no arguments -> dumping all flows						|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_c2_rule_hit_dump	| dump maskable entries with the lookup type						|
	|			| 	cls_c2_rule_hit_dump --type  (no arguments)					|
	|			|											|
	|			|	--type  	(dec) lookup type number 0 - 64					|
	|			|	no arguments -> dumping all flows						|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_qos_pcp_table_dump| dump pcp qos table									|
	|-----------------------|---------------------------------------------------------------------------------------|
	|cls_qos_dscp_table_dump| dump dscp qos table									|
	|-----------------------|---------------------------------------------------------------------------------------|
	| cls_mng_table_dump	| dump all tables and defined rules in db						|
	|-----------------------|---------------------------------------------------------------------------------------|
