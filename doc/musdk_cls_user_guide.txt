Packet Processor Classifier (CLS) User Guide
============================================

Introduction
------------
MUSDK Classifier and applications are part of the MUSDK package.

MUSDK Classifier provides the capability of configuring the Packet Processor HW Classifier Engine for user-space applications.

Feature Set
-----------

Supported API's
~~~~~~~~~~~~~~~
	- pp2_cls_tbl_init
	- pp2_cls_tbl_deinit
	- pp2_cls_tbl_add_rule
	- pp2_cls_tbl_modify_rule
	- pp2_cls_tbl_remove_rule
	- pp2_cls_qos_tbl_init
	- pp2_cls_qos_tbl_deinit
	- pp2_cls_plcr_init
	- pp2_cls_plcr_deinit

General Limitations
~~~~~~~~~~~~~~~~~~~
	- Default queue can not be set from MUSDK API. The default queue is taken from Kernel configuration. For
	  configuring the default queue, please refer to PPv2.2 Kernel Module Parameters chapter.
	- MUSDK classifier database and Kernel database are not synchronized yet, therefore there is no support for
	  simultaneous updates in Kernel/User Space.

Known Issues
~~~~~~~~~~~~
	- It is possible to add new flows even if the same flow was just added
	- After MUSDK is initialized, it is not possible to add more flows through Kernel (i.e. through sysfs)
	- The musdk_cls_demo application supports configuration of only a single port at a time

Feature Description
-------------------
The MUSDK classifier is part of the ingress flow, and as such works together with the MUSDK PPIO unit.
The features relevant to the ingress flow are described below:

	1) L2 filters: configuring L2-filters (MAC unicast address, MAC multicast address and VLANs). This feature
	   is described in detail in musdk ppio user guide
	2) Classification: configuring classification rules to incoming packets
	3) QoS-Mapping: configuring according to VLAN priority and DSCP
	4) Policing: colouring incoming packets for specific flows. This feature is described in detail in
	   musdk ppio user guide
	5) Multicore support for RSS: configuring RSS tables for load balancing. This feature is described in detail in
	   musdk ppio user guide

The following actions may be defined to incoming packets:
	- Drop packet or not
	- Set destination queue (CPU + Priority)


When an interface is reserved for kernel use, a simple and standard NIC is supported according to the flow in the figure below.

.. _fig_kernel_ppv2_rx_simple_flow:

.. figure:: /images/kernel_ppv2_rx_simple_flow.*
   :align: center

   Kernel Receive packet flow

A Packet that is introduced to the PPv2x HW Port, may pass through the following phases:
	- l2-filter stage where the packet may be dropped or passed to the next stage
	- QoS-mapping stage which maps traffic types (i.e. may be according to VLAN-priority or IP-DSCP) to queues
	- RSS stage where eventually, the traffic may be spread between specific queues (of the same QoS) according to
	  hash-table.

When an interface is reserved for MUSDK use, it is possible to create a User-Space NIC, which has similar features as the
kernel one with the addition of a Classification stage that may take place before QoS-mapping.

.. _fig_musdk_ppv2_rx_simple_flow:

.. figure:: /images/musdk_ppv2_rx_simple_flow.*
   :align: center

   MUSDK Receive packet flow

A Packet that is introduced to the PPv2x HW Port, may pass through:
	- l2-filter stage where the packet may be dropped or passed to the next stage
	- The packet then may go through a Classification stage were different classification rules may be configured
	  according to network protocol fields
	- The packet then may go through a QoS-mapping stage which maps traffic types (i.e. may be according to
	  VLAN-priority or IP-DSCP) to queues
	- RSS stage where eventually, the traffic may be spread between specific queues (of the same QoS) according to
	  hash-table.

When the port is defined as a logical port (see musdk ppio user guide), the ingress flow includes another stage as
can be seen in the figure below:

.. _fig_musdk_ppv2_rx_complex_flow_1:

.. figure:: /images/musdk_ppv2_rx_complex_flow_1.*
   :align: center

   MUSDK Receive packet flow for a logical port

A Packet that is introduced to the PPv2x HW Port, may pass through a l2-filter stage where the packet may be dropped or
passed to the next stage. The packet then goes to a classification stage where it is classified as a “Slow-path” (SP) or
“Fast-Path” (FP) traffic type according to the network protocol; e.g. all traffic that is Ethernet IPv4 UDP is classified as
FP, while all other traffic type is classified as SP. For the SP traffic, the packet is forwarded to kernel space (KS)
where it goes through the same receive packet flow as described above (with the exception that in KS there is no
classification stage). For FP traffic, the packet then continues through the same user space (US) NIC flow as previously described.

For supporting the above features, the PPv2 packet processor includes the following HW units:
	- Parser
	- Classifier and Qos
	- Policer
	- RSS

Parser Unit
~~~~~~~~~~~
The Parser unit performs configurable pipelined parsing for interleaved arriving packets. The Parser unit identifies
the packet header and forwards the results to the classifier controller.

The parser's main role is parsing, identification of the networking protocol stack and passing indications to the Classifier block.
Packet processing for all networking ports is done with a single TCAM with flexible configuration and partitioning,
through several lookup iterations.

Following is a list of default parsing fields:
	- Single and double VLAN tagged packets (ether type 0x8100 and 0x88a8)
	- Ether type parse - includes:
		- ARP (0x0806)
		- IPV4 (0x0800, non-opt and opt, no PPPoE and over PPPoE)
		- IPV6 (0x86dd, no PPPoE and over PPPoE)
		- unknown ether type
	- L4 info parse - includes:
		- Both TCP and UDP including IPV4 non-frag and frag
		- unknown L4 info
	- PPPoE parse: (ether type 0x8864)
	- IGMP parsing
	- Broadcast, unicast (MTM and non-MTM), multicast parse


Classifier Unit
~~~~~~~~~~~~~~~
The Classifier unit performs packets classification. Packets classification is done based on the parsing results
received from the Parser and on lookups performed by the various classification engines.

The Classifier determines the various actions required for the packet: **Drop** or **Set target queue**.
These actions are transferred to the RX FIFO.

The following steps are taken in each packet classification:
	- Select classification flow according to Lookup ID and physical Port ID.
	- Issue lookup commands as defined by the classification flow.
	- Execute lookup commands by the search engines.
	- Resolve the classification attributes in priority order.

The classification engines consist of the following:
	- Maskable: the Maskable Engine provides TCAM based lookup for a key and generates the required
	  actions based on the lookup results
	- Exact Match: the Exact Match engine performs lookup of a key in an internal
	  preconfigured database (Exact Match Search Engine)
	- RSS: The RSS engine’s task is to enable statistical load balancing between multiple cores

- The task of the classification engines is to perform the lookups and generate the resulting actions to the actions resolver
- The action resolver resolves the received actions and generates the Classification results

Classifier Limitations
~~~~~~~~~~~~~~~~~~~~~~
- The Maskable engine supports 256 entries and has a maximum matching key length of 8 bytes
- The Exact match engine supports up to 4K entries and has a maximum matching key length of 12 bytes
- The Exact match engine can alternatively support up to 256 entries and has a maximum matching key length of 36 bytes (required for IPv6)

Classifier Pre-defined Capabilities
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The following classification capabilities are supported by MUSDK classifier (defined in mv_net.h API file):

	- Ethernet protocol source address (SMAC)
	- Ethernet protocol destination address (DMAC)
	- Ethernet protocol type
	- VLAN priority
	- VLAN ID (VID)
	- IPv4 TOS
	- IPv4 source address (SIP)
	- IPv4 destination address (DIP)
	- IPv4 destination protocol
	- IPv6 source address
	- IPv6 destination address
	- IPv6 flow
	- IPv6 next header
	- L4 source port
	- L4 destination port
	- L4 UDP source port
	- L4 UDP destination port
	- L4 TCP source port
	- L4 TCP destination port

- Examples of possible classification capabilities according to engine

	+-------------------------------+--------------------------------+
	| Classifier capability		| Engine support		 |
	+===============================+================================+
	| SIP+DIP+SPORT+DPORT+PROT	| Only Exact match (12 bytes key)|
	+-------------------------------+--------------------------------+
	| SPORT+DPORT+PROT		| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| DPORT+PROT			| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| SPORT+PROT			| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| DMAC + VID			| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| DMAC				| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| DIP + VID			| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| DIP				| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| SMAC + VID			| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| SMAC				| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| SIP + VID			| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| SIP				| Maskable or Exact match	 |
	+-------------------------------+--------------------------------+
	| DIP + SIP + VID		| Only Exact match (10 bytes key)|
	+-------------------------------+--------------------------------+
	| DMAC + SIP + VID		| Only Exact match (12 bytes key)|
	+-------------------------------+--------------------------------+

.. note::
	1. All entries which are defined as Maskable may also be configured as exact match engine
	2. Only one table may be defined
	3. Not all combinations were tested

Please refer to MUSDK classifier section "How To Run The Example Application" for an explanation of how to use and configure this API.

QoS
---------
Quality of Service is supported in the classifier unit. The QoS maps traffic types to queues.

The following traffic types are supported:
	- VLAN priority:	QoS according to VLAN-priority (outer tag) if exists; otherwise, use default
	- IP-ToS priority:	QoS according to IP-priority (i.e. DSCP) if exists; otherwise, use default
	- VLAN_IP priority:	QoS according to VLAN-priority (outer tag) if exists;
				otherwise, use IP-priority (i.e. DSCP) if exists; otherwise, use default
	- IP_VLAN priority:	QoS according to IP-priority (i.e. DSCP) if exists;
				otherwise, use VLAN-priority (outer tag)  if exists; otherwise, use default

Please refer to MUSDK classifier section "How To Run The Example Application" for an explanation of how to use and configure this API.

Policer Unit
~~~~~~~~~~~~~~~

Policing is performed by HW policer unit. The classifier allows selection of a policer profile for a specific rule.

Please follow the sequence below to activate the policer function for a specific flow:
1. Call pp2_cls_plcr_init API with appropriate parameters (such as rate, burst, etc.)
2. Assign the returned policer-profile ID to a rule's action by calling either pp2_cls_tbl_add_rule (for new rule)
	or pp2_cls_tbl_modify_rule for exisiting rule.

When a packet hits a rule for which a policer-profile-id was assigned, the policer HW activates the policer algorithm for it.
If the policer decides to set the color of the packet to RED, the packet is dropped.
