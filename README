		Marvell (c) Linux User-Space SDK (MUSDK)
=================================================

MUSDK is a light-weight user-space I/O driver for Marvell Networking HW blocks
(e.g. Packet-Procesor, Security-Accelaration-Module, etc.).
The purpose of this driver library is to provide a simple and direct access to
Marvell networking related HW for networking applications and networking
infrastrucutres (e.g. OpenDataPlane).

Coding style:
-------------
Linux Kernel Coding Style
https://www.kernel.org/doc/Documentation/CodingStyle


Steps to build and run the MUSDK library:
-----------------------------------------

1. Build Linux kernel

1.1. Make sure the Linux is build with the following configuration flags:
	CONFIG_MVPP2X=y
	CONFIG_UIO=y

1.2. Apply all patches found <musdk-src-dir>/patches/linux
Note: "0003-patch-dts-set-port0-status-non-kernel.patch" is an _example_ how to configure
	the PPV2 ports that belong to musdk.

1.3. Build Linux Image
=> make Image

2. Build the MUSDK UIO kernel module and install it
=> cd <musdk-src-dir>/modules/uio
=> make

3. Build the PP2-tmp kernel module and install it:
=> cd <musdk-src-dir>/modules/pp2
=> make

4. Install and build EIP197 DDK
This step is optional and required only to use SAM driver

4.1. Get EIP197 DDK sources from git or release
=> git clone http://vgitil04.il.marvell.com:8080/modules/mv_eip197_is_driver
=> git checkout eip197-4.7-devel

4.2 Build EIP197 DDK as described in eip197-ReleaseNotes.txt
Output files are:
- umdevxs_k.ko
- libdriver_197_u.a
- libsa_bld_u.a
- libtk_bld_u.a

5. Build the MUSDK and install it

To build MUSDK SAM package EIP197 DDK must be installed and build before.
For more details please refer chapter "Build Process" in the document: "eip197-ReleaseNotes.txt"

5.1 Set external variables
- Cross compiler for compilation of user space libraries and applications. e.g.:
=> export CROSS_COMPILE=~/SDK/aarch64v8-marvell-linux-gnu-5.2.1_i686_20151110/bin/aarch64-marvell-linux-gnu-
- EIP197 DDK location (optional - required only for AM driver compilation) e.g.
=> export EIP197_DDK=~/SoC/eip197_branches/eip197-4.7.1/mv_eip197_is_driver/eip197/SafeXcel-IP-197_DDK_v4.7
- EIP197 DDK Firmware location (optional - required only for AM driver compilation) e.g.
=> export EIP197_DDK_FW=~/SoC/eip197_branches/eip197-4.7.1/mv_eip197_is_driver/eip197/SafeXcel-Firmware/eip197

5.2 Build MUSDK package
=> cd <musdk-src-dir>
=> ./bootstrap
=> ./configure
To compile SAM driver and SAM test application use
=> ./configure --enable-sam
=> make -j8
=> make install
NOTE: As a temporary W/A, move all files in $AC_PREFIX_DEFAULT/include/include to $AC_PREFIX_DEFAULT/include

6. Running MUSDK apps

6.1. Copy the kernel modules (musdk_uio.ko, etc.) to the target board file-system.

6.2. Copy the MUSDK local install folder (as defined by AC_PREFIX_DEFAULT) to the target board file-system.

6.3. Insert MUSDK kernel space modules
=> insmod musdk_uio.ko
=> insmod mv_pp_uio.ko

6.4 Insert EIP197 kernel space module (optional - needed only to run "musdk_sam_kat")

To run MUSDK SAM test applications eip197 driver kernel module must be loaded before.
For more details please refer chapter "EIP197 Framework Usage" in the document: "eip197-ReleaseNotes.txt"

6.4.1 Load kernel module: "umdevxs_k.ko"
=> "insmod umdevxs_k.ko nof_dma_bufs=4096"

6.4.2 Create character device node: "/dev/umdevxs_c"
=> "mknod /dev/umdevxs_c c ${major_nr} 0"

See script from the EIP197 release directory: "scripts/mv_eip197_us_load.sh"

6.5 Run a MUSDK application examples
=> musdk_dma_mem
=> musdk_pkt_echo

6.5.1 Run test "musdk_sam_single"
=> musdk_sam_single
This application run single AES128-CBC encryption test on predefined inputs and check validity of the output

6.5.2 Run test application "musdk_sam_kat"
=> ./musdk_sam_suite [aes_test.txt | 3des_tests.txt | hmac_tests.txt]
This application read data from from the input file, run the tests one after other and
check output validity.
See format of the input files in the examples under directory: "apps/tests/sam_kat_suite/"
- aes_tests.txt  - AES tests
- 3des_tests.txt - 3DES tests
- hmac_tests.txt - HMAC MDD5/SHA1/SHA2 tests

